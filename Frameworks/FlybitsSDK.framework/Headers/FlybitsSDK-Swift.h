// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreLocation;
@import CoreBluetooth;
@import CoreData;
@import CoreGraphics;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AccountQuery;
@class User;
@class NSError;
@class FlybitsRequest;
@class UploadImageItem;
@class ZonesQuery;
@class Zone;
@class Pager;
@class UsersQuery;
@class TagQuery;
@class Tag;
@class VisibleTag;
@class MomentQuery;
@class Moment;
@class MomentAuthorizationResponse;
@class DeviceQuery;
@class Image;
enum ImageSize : NSInteger;
@class UIImage;
@class ImageMetadata;
@class PushQuery;
@class PushMessage;

/**
  APIManager is a wrapper for use with Objective-C based projects.
  All Swift based projects should use the Requestable enums such as SessionRequest, ZoneRequest or UserRequest.
*/
SWIFT_CLASS("_TtC10FlybitsSDK10APIManager")
@interface APIManager : NSObject
/**
  Registers a new account with the connected Flybits tennant.
  \param with An \code
  AccountQuery
  \endcode object that includes the user’s email, first and last name and a password.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)register:(AccountQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Updates the user profile of the currently logged in user.
  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)updateDetailsWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Updates the email address of the currently logged in user.
  \param newEmail The user’s new email address.

  \param password The user’s password.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)updateEmail:(NSString * _Nonnull)newEmail password:(NSString * _Nonnull)password withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Updates the profile image of the currently logged in user with a local image.
  \param with The metadata of the new image to upload.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)updateImageWithFile:(UploadImageItem * _Nonnull)newImage withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Updates the profile image of the currently logged in user with an URL
  \param with The URL of the new image to upload.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)updateImageWithURL:(NSString * _Nonnull)newImageURL withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Updates the password of the currently logged in user.
  \param from The user’s existing password.

  \param to The user’s desired password.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)updatePassword:(NSString * _Nonnull)currentPassword newPassword:(NSString * _Nonnull)newPassword withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Sends the user an email to reset his/her password.
  \param for Email of the acccount whose password to be resetted

  \param completion on success error will be nil, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)forgotPasswordForEmail:(NSString * _Nonnull)email withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Login with email address and password.
  \param with Email address of the user.

  \param password Password of the user.

  \param rememberMe Whether or not the session should expire after a short period of time.

  \param fetchJWT Whether or not a JWT should be generated for this session.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)loginWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password rememberMe:(BOOL)rememberMe fetchJWT:(BOOL)fetchJWT withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Login using third party authorization: Open Authentication (OAuth)
  \param with Token returned from oAuth server.

  \param isOauthToken Is it an OAuth token from a third party?

  \param rememberMe Whether or not the session should expire after a short period of time.

  \param fetchJWT Whether or not a JWT should be generated for this session.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)loginWithToken:(NSString * _Nonnull)token isOAuthToken:(BOOL)isOauthToken rememberMe:(BOOL)rememberMe fetchJWT:(BOOL)fetchJWT withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Login using third party authorization: Security Assertion Markup Language (SAML)
  \param with Name of the authorization provider.

  \param token Token returned by authorization server.

  \param signature Base 64 encoded bytes of the signature which validates the token.

  \param rememberMe Whether or not the session should expire after a short period of time.

  \param fetchJWT Whether or not a JWT should be generated for this session.

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)loginWithProvider:(NSString * _Nonnull)provider token:(NSString * _Nonnull)token signature:(NSData * _Nonnull)signature rememberMe:(BOOL)rememberMe fetchJWT:(BOOL)fetchJWT withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Logs out the current user from this device.
  \param completion A callback containing an error if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)logoutWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Makes a query to retreive zones.
  \param query ZoneQuery The Query object. Includes criteria to use for querying.

  \param completion callback that returns Array of \code
  Zone
  \endcodes with pagination, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)zonesFilteredByQuery:(ZonesQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<Zone *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/**
  Requests a specific Zone by ID.
  \param by The ID of the Zone to retrieve.

  \param completion callback that returns Array of \code
  Zone
  \endcodes with pagination, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getZoneWithID:(NSString * _Nonnull)zoneID withCompletion:(void (^ _Nonnull)(Zone * _Nullable, NSError * _Nullable))completion;
/**
  Favourite or Unfavourite a zone.
  \param with The ID of the Zone object which you want to favourite

  \param isFavourite true, will favourite the zone, false will unfavourite the zone

  \param completion Success when the action is successfully completed, Error when an error occurs.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)favouriteZoneWithID:(NSString * _Nonnull)zoneID isFavourite:(BOOL)isFavourite withCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  Get list of zones that are favourited by the current user.
  \param completion callback that returns Array of \code
  Zone
  \endcodes with pagination, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getMyFavouriteZonesWithCompletion:(void (^ _Nonnull)(NSArray<Zone *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/**
  Get list of zones that are created by the current user.
  \param completion callback that returns Array of \code
  Zone
  \endcodes with pagination, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getMyZonesWithCompletion:(void (^ _Nonnull)(NSArray<Zone *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/**
  Creates a \code
  Zone
  \endcode on the server with the provided object.
  \param zone The \code
  Zone
  \endcode to register with the server.

  \param completion callback that returns a \code
  Zone
  \endcode on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)createZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable, NSError * _Nullable))completion;
/**
  Updates an existing \code
  Zone
  \endcode with the server.
  \param zone The \code
  Zone
  \endcode to update on the server.

  \param completion callback that returns a \code
  Zone
  \endcode on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)updateZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable, NSError * _Nullable))completion;
/**
  Deletes an existing \code
  Zone
  \endcode on the server.
  \param with The unique identifier of a \code
  Zone
  \endcode to delete from the server.

  \param completion A callback containing an error if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)deleteZoneWithID:(NSString * _Nonnull)zoneID withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Publishes an existing \code
  Zone
  \endcode.
  \param zone An existing \code
  Zone
  \endcode to be published.

  \param completion A callback containing an error if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)publishZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable, NSError * _Nullable))completion;
/**
  Unpublishes an existing \code
  Zone
  \endcode.
  \param zone An existing \code
  Zone
  \endcode to be unpublished.

  \param completion A callback containing an error if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)unpublishZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable, NSError * _Nullable))completion;
/**
  Retrieves the details of the currently logged in user.
  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getSelfWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Retrieves the details of a specified user. When \code
  nil
  \endcode is passed in for \code
  userID
  \endcode, current logged in user info is returned
  \param with the id of the user or \code
  nil
  \endcode to get current logged in user

  \param completion A callback containing a user object on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getUserWithID:(NSString * _Nullable)userID withCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Retrieves the details of a list of specified users.
  \param filteredBy A users query that includes user IDs plus additional search criteria

  \param completion A callback containing a list of user objects on success, an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)usersFilteredByQuery:(UsersQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<User *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/**
  Disables the currently logged in user.
  \param completion A callback containing an error if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)disableCurrentUserWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Asks the server to remember the current user’s session
  \param completion A callback containing an error if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)rememberMeWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Get list of tags based on \code
  TagQuery
  \endcode, options include retrieving a list of all tags mapped to zones / moments, searching for tags with a specific value or retrieving a list of tags associated with a list of zone IDs.
  \param filteredBy \code
  TagQuery
  \endcode that should be matched when getting tags.

  \param completion \code
  tags
  \endcode - An array of tags that satisfies the conditions set by the \code
  query
  \endcode.<br />
  \code
  pagination
  \endcode - Number of tags returned and total tags available.<br />
  \code
  error
  \endcode - Any network / server errors.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)tagsFilteredByQuery:(TagQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<Tag *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/**
  Get list of tags based on \code
  TagQuery
  \endcode, options include retrieving a list of all tags mapped to zones / moments, searching for tags with a specific value or retrieving a list of tags associated with a list of zone IDs.
  NOTE: Visible tags add an additional parameter \code
  visibility
  \endcode to control whether or not this tag is displayed in the client.
  \param filteredBy \code
  TagQuery
  \endcode that should be matched when getting tags

  \param completion \code
  tags
  \endcode - An array of tags that satisfies the conditions set by the \code
  query
  \endcode.<br />
  \code
  pagination
  \endcode - Number of tags returned and total tags available.<br />
  \code
  error
  \endcode - Any network / server errors.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)visibleTagsFilteredByQuery:(TagQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<VisibleTag *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/**
  Retrieves a specific tag with a given tag id.
  \param with The id of the tag to retrieve.

  \param completion A completion that returns a \code
  Tag
  \endcode on success, error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getTagWithID:(NSString * _Nonnull)tagID withCompletion:(void (^ _Nonnull)(Tag * _Nullable, NSError * _Nullable))completion;
/**
  Retrieves a specific tag with a given tag id.
  NOTE: Visible tags add an additional parameter \code
  visibility
  \endcode to control whether or not this tag is displayed in the client.
  \param with The id of the tag to retrieve.

  \param completion A completion that returns a \code
  VisibleTag
  \endcode on success, error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getVisibleTagWithID:(NSString * _Nonnull)tagID withCompletion:(void (^ _Nonnull)(VisibleTag * _Nullable, NSError * _Nullable))completion;
/**
  Get list of zone moments based on \code
  MomentQuery
  \endcode.
  \param filteredBy \code
  MomentQuery
  \endcode that should be satisfied when getting list of moments

  \param completion Callback with a list of moments as well as paging and error information if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nullable)momentsFilteredByQuery:(MomentQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<Moment *> * _Nonnull, Pager * _Nullable, NSError * _Nullable))completion;
/**
  Get detail of a moment using momentID.
  \param with id of the \code
  Moment
  \endcode

  \param completion \code
  moment
  \endcode: instance of \code
  Moment
  \endcode with \code
  moment.id = momentID
  \endcode.<br />
  \code
  error
  \endcode: Any error occured while making this request.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getMomentWithID:(NSString * _Nonnull)momentID withCompletion:(void (^ _Nonnull)(Moment * _Nullable, NSError * _Nullable))completion;
/**
  Automatically gets authorization and validates the moment so data can be retrieved from the moment.
  \param moment MomentInstance that you want to retrieve the data from

  \param completion \code
  validated
  \endcode: weather or not the moment was validated.<br />
  \code
  error
  \endcode: Any error occured while making this request.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)autoValidateMoment:(Moment * _Nonnull)moment withCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  Validates the authorization payload for the moment
  \param moment a moment instance’s authorization payload that should be validated before the data can be retrieved.

  \param authorization MomentAuthorizationResponse returned by the \code
  momentAuthorization
  \endcode function.

  \param completion \code
  validated
  \endcode: weather or not the moment was validated.<br />
  \code
  error
  \endcode: Any error occured while making this request.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)validateMoment:(Moment * _Nonnull)moment authorization:(MomentAuthorizationResponse * _Nonnull)authorization withCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  Get authorization payload data so data can be retrieved from the moment. This payload should be verified using the \code
  momentValidate
  \endcode function.
  \param moment Moment.identifier of a Moment.

  \param completion \code
  authorization
  \endcode: A payload containing access for this moment.<br />
  \code
  error
  \endcode: Any error occured while making this request.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)authorizeMomentIdentifier:(NSString * _Nonnull)momentIdentifier withCompletion:(void (^ _Nonnull)(MomentAuthorizationResponse * _Nullable, NSError * _Nullable))completion;
/**
  Connects to a specified zone or moment.
  \param query A device query identifying the request as a Zone or Moment applicable request along with the id and device id.

  \param completion A completion that returns errors if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)deviceConnect:(DeviceQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Disconnects to a specified zone or moment.
  \param query A device query identifying the request as a Zone or Moment applicable request along with the id and device id.

  \param completion A completion that returns errors if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)deviceDisconnect:(DeviceQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Downloads a specified image at full size using the default locale.
  \param rawImage A metadata object containing various information about the image.

  \param completion A closure returning an image ID and an NSData object on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadRawImage:(Image * _Nonnull)image withCompletion:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/**
  Downloads a specified image at full size using an optional locale.
  \param rawImage A metadata object containing various information about the image.

  \param atSize The desired size of the image.

  \param completion A closure returning an image ID and an NSData object on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadRawImage:(Image * _Nonnull)image atSize:(enum ImageSize)imageSize withCompletion:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/**
  Downloads a specified image at full size using an optional locale.
  \param rawImage A metadata object containing various information about the image.

  \param forLocale The desired locale for the image.

  \param completion A closure returning an image ID and an NSData object on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadRawImage:(Image * _Nonnull)image forLocale:(NSLocale * _Nonnull)locale withCompletion:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/**
  Downloads a specified image using an optional locale and size.
  \param rawImage A metadata object containing various information about the image.

  \param forLocale The desired locale for the image.

  \param atSize The desired size of the image.

  \param completion A closure returning an image ID and an NSData object on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadRawImage:(Image * _Nonnull)image forLocale:(NSLocale * _Nonnull)locale atSize:(enum ImageSize)imageSize withCompletion:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/**
  Downloads a specified image at full size using the default locale.
  \param image A metadata object containing various information about the image.

  \param completion A closure returning an instantiated UIImage on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadImage:(Image * _Nonnull)image withCompletion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/**
  Downloads a specified image at full size using an optional locale.
  \param image A metadata object containing various information about the image.

  \param atSize The desired size of the image.

  \param completion A closure returning an image ID and an NSData object on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadImage:(Image * _Nonnull)image atSize:(enum ImageSize)imageSize withCompletion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/**
  Downloads a specified image at full size using an optional locale.
  \param image A metadata object containing various information about the image.

  \param forLocale The desired locale for the image.

  \param completion A closure returning an instantiated UIImage on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadImage:(Image * _Nonnull)image forLocale:(NSLocale * _Nullable)locale withCompletion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/**
  Downloads a specified image using an optional locale and size.
  \param image A metadata object containing various information about the image.

  \param forLocale The desired locale for the image.

  \param atSize The desired size of the image.

  \param completion A closure returning an instantiated UIImage on success, an error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)downloadImage:(Image * _Nonnull)image forLocale:(NSLocale * _Nullable)locale atSize:(enum ImageSize)imageSize withCompletion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/**
  Uploads a local image to Flybits’ servers.
  \param from A metadata object describing the image to upload.

  \param completion A closure containing the image information returned by the server on success, error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)uploadFlybitsImageFromFile:(UploadImageItem * _Nonnull)uploadItem withCompletion:(void (^ _Nonnull)(ImageMetadata * _Nullable, NSError * _Nullable))completion;
/**
  Uploads a remote image to Flybits’ servers.
  \param from The location of the remote image.

  \param completion A closure containing the image information returned by the server on success, error on failure.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)uploadFlybitsImageFromURL:(NSString * _Nonnull)URL withCompletion:(void (^ _Nonnull)(ImageMetadata * _Nullable, NSError * _Nullable))completion;
/**
  Uploads a local image to a specified location.
  \param image A metadata object describing the image to upload.

  \param completion A closure containing the result returned by the server (\code
  AnyObject
  \endcode), error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)uploadImage:(UploadImageItem * _Nonnull)uploadItem withCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
/**
  Get tenant specific settings from Flybits. Each tenant can define their own key-value pair of settings from the ExperienceStudio and which can be retrieved from mobile to configure the app to behave certain way.
  \param completion A closure containing the result returned by the server (\code
  Dictionary
  \endcode), error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getTenantSettingsWithCompletion:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable))completion;
/**
  Sends properly formatted, custom context data to Flybits’ context servers.
  \param contextData A properly formatted dictionary of data intended for Flybits’ context servers.

  \param completion A completion that returns errors if applicable.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)sendContextData:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)contextData withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/**
  Retrieves a list of APNS notifications that have been sent to this device.
  \param filteredBy A \code
  PushQuery
  \endcode specifying any filtering options desired.

  \param completion A completion that returns a list of messages matching the provided query with pagination, an empty list and an error otherwise.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
+ (FlybitsRequest * _Nonnull)getNotificationHistory:(PushQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<PushMessage *> * _Nonnull, Pager * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSHTTPURLResponse;

/**
  Controls subscriptions to APNS topics. Convenience functions exist in \code
  Zone
  \endcode, \code
  Moment
  \endcode and \code
  Tag
  \endcode objects.
*/
SWIFT_CLASS("_TtC10FlybitsSDK15APNSPreferences")
@interface APNSPreferences : NSObject
/**
  Whether or not a save is pending.
*/
@property (nonatomic, readonly) BOOL requiresSave;
/**
*/
@property (nonatomic, readonly) BOOL isLoaded;
/**
  The object’s description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  The object’s debugDescription.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/**
  Failable initializer that returns an \code
  APNSPreferences
  \endcode based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Whether or not a given topic has push disabled.
  \param topic The topic to check against the list of disabled elements.


  returns:
  True if the topic has push disabled, False otherwise.
*/
- (BOOL)isPushDisabledFor:(NSString * _Nonnull)topic;
/**
  Enables push for a given topic (removes it from the blacklist).
  \param topic The topic for which to enable push notifications.

*/
- (void)enablePushFor:(NSString * _Nonnull)topic;
/**
  Disables push for a given topic (adds it to the blacklist).
  \param topic The topic for which to disable push notifications.

*/
- (void)disablePushFor:(NSString * _Nonnull)topic;
/**
  Saves the current blacklist to the server. Success or failure is broadcast by the \code
  PushManager
  \endcode.
*/
- (void)save;
/**
  Loads the current blacklist from the server. Success or failure is broadcast by the \code
  PushManager
  \endcode.
*/
- (void)load;
/**
  Clears current blacklist and marks the list as requiring a save
*/
- (void)clearAllKeywords;
@end


/**
  Base class for creating queries to retrieve zones/moments/users.
  When creating a query, you can define which fields to be included with the
  response and which fields should be omitted. If the API supports pagination,
  then certain chunk of data can be retrieved at one time using \code
  Pager
  \endcode.
  You can subclass Query and override \code
  func toDictionary() -> [String:String]
  \endcode to
  return key-value pairs which will be turned into the URL path for a request.
*/
SWIFT_CLASS("_TtC10FlybitsSDK5Query")
@interface Query : NSObject
/**
  Name of the properties of models that should ONLY be included in the response (anything you don’t list here will be left out or set to \code
  null
  \endcode)
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable includes;
/**
  Name of the properties of models that should be excluded in the response.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable excludes;
/**
  The pager object, used to page an API.
*/
@property (nonatomic, strong) Pager * _Nonnull pager;
/**
  \code
  limit
  \endcode and \code
  offset
  \endcode are used for pagination. Get items starting at \code
  offset
  \endcode and returns number of items upto \code
  limit
  \endcode.
  \param limit The maximum number of records to return.

  \param offset The offset into the recordset to start.

*/
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a pager with default limit of 10 and offset of 0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience function for creating a default \code
  Query
  \endcode.

  returns:
  A \code
  Query
  \endcode object.
*/
+ (nonnull instancetype)query;
/**
  A convenience function for creating a \code
  Query
  \endcode with a limit and no offset.
  \param limit The maximum number of records to return.


  returns:
  A \code
  Query
  \endcode object.
*/
+ (nonnull instancetype)queryWithLimit:(NSUInteger)limit;
/**
  A convenience function for creating a \code
  Query
  \endcode with a limit and offset.
  \param limit The maximum number of records to return.

  \param offset The offset into the recordset to start.


  returns:
  A \code
  Query
  \endcode object.
*/
+ (nonnull instancetype)queryWithLimit:(NSUInteger)limit andOffset:(NSUInteger)offset;
/**
  Returns key-value pair for URL path
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Override to pretty-print the \code
  Query
  \endcode’s debug description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/**
  Override to pretty-print the \code
  Query
  \endcode’s description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/**
  A query used to create an account.
*/
SWIFT_CLASS("_TtC10FlybitsSDK12AccountQuery")
@interface AccountQuery : Query
/**
  The user’s first name.
*/
@property (nonatomic, copy) NSString * _Nullable firstname;
/**
  The user’s last name.
*/
@property (nonatomic, copy) NSString * _Nullable lastname;
/**
  The user’s desired password.
*/
@property (nonatomic, copy) NSString * _Nullable password;
/**
  The user’s email address.
*/
@property (nonatomic, copy) NSString * _Nullable email;
/**
  Whether or not a JWT should be fetched, defaults to true
*/
@property (nonatomic) BOOL fetchJWT;
/**
  Whether or not a rememberMe token should be fetched, defaults to false
*/
@property (nonatomic) BOOL fetchRememberMe;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ContextDataPriority : NSInteger;

SWIFT_PROTOCOL("_TtP10FlybitsSDK19ContextDataProvider_")
@protocol ContextDataProvider <NSObject>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
/**
  This function is called when the \code
  pollFrequency
  \endcode has elapsed.
  <em>NOTE: If this object is not polled (\code
  pollFrequency = nil
  \endcode), this method is not called.</em>
  \param completion The completion that will provide the \code
  ContextManager
  \endcode with data or an error as appropriate.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC10FlybitsSDK20ActivityDataProvider")
@interface ActivityDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)startUpdates;
- (void)stopUpdates;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC10FlybitsSDK17AudioDataProvider")
@interface AudioDataProvider : NSObject <ContextDataProvider>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC10FlybitsSDK24AvailabilityDataProvider")
@interface AvailabilityDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end


/**
  The \code
  BatteryDataProvider
  \endcode provides information about the device’s battery percentage and whether or not it is charging.
*/
SWIFT_CLASS("_TtC10FlybitsSDK19BatteryDataProvider")
@interface BatteryDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
  The category of context in which the data provided is stored, i.e. ctx.sdk.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10FlybitsSDK6Beacon")
@interface Beacon : NSObject
@property (nonatomic, readonly) NSInteger strength;
@property (nonatomic, readonly) CLLocationDistance distance;
@property (nonatomic, readonly) NSInteger batteryLevel;
@property (nonatomic, readonly) BOOL inRange;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull beaconType;)
+ (NSString * _Nonnull)beaconType;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithStrength:(NSInteger)strength distance:(CLLocationDistance)distance batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange OBJC_DESIGNATED_INITIALIZER;
- (void)update:(Beacon * _Nonnull)other;
+ (NSInteger)calculateBatteryPercentage:(uint16_t)voltage;
+ (CLLocationDistance)calculateDistance:(NSInteger)txPower RSSI:(NSInteger)RSSI;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class MonitoredBeacon;

SWIFT_CLASS("_TtC10FlybitsSDK18BeaconDataProvider")
@interface BeaconDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
/**
  The frequency at which the beacon list will be refreshed
*/
@property (nonatomic) NSInteger beaconPollFrequency;
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency OBJC_DESIGNATED_INITIALIZER;
- (void)startMonitoring:(NSArray<MonitoredBeacon *> * _Nonnull)monitoredBeacons;
- (void)stopMonitoring:(NSArray<MonitoredBeacon *> * _Nonnull)monitoredBeacons;
- (void)startBeaconQuery;
- (void)stopBeaconQuery;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;

SWIFT_CLASS("_TtC10FlybitsSDK13BeaconManager")
@interface BeaconManager : NSObject <CBCentralManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BeaconManager * _Nonnull sharedManager;)
+ (BeaconManager * _Nonnull)sharedManager;
@property (nonatomic, readonly) BOOL isScanning;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
@end

enum BooleanQueryOp : NSInteger;

/**
  BooleanQuery allows certain fields of the request query to be evaluated using boolean
  expression to retrieve data from Flybits.
  For example:
  You can query to get zones based on their tagId if they satisfy the following expression:
  \code
  let eq1 = BooleanQuery()
  .orItem("Q")
  .andItems(["A", "B"], .AND)

  // equivalent to Q && (A && B)

  \endcodeObjC example:
  \code
  BooleanQuery *query = [[BooleanQuery alloc] init:@"A"];
  [query AND:@[@"B", @"C"] op: BooleanQueryOpAND];
  [query OR:@"D"];
  [query AND:@"E"];
  [query AND:@[@"F", @"G"] op: BooleanQueryOpAND];
  [query OR:@[@"H", @"I"] op: BooleanQueryOpAND];
  [query OR:@"J"];

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK12BooleanQuery")
@interface BooleanQuery : NSObject
@property (nonatomic, readonly, strong) NSError * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Initialize BooleanQuery with single item
  \param value initial item for the expression

*/
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize BooleanQuery with array of items and each item in the array is the
  operand and \code
  op
  \endcode as the operator.
  \param values items that to be appended to the expression using the operator

  \param op Operator to be used between each items in the values when building the expression

*/
- (nonnull instancetype)initWithValues:(NSArray<NSString *> * _Nonnull)values op:(enum BooleanQueryOp)op OBJC_DESIGNATED_INITIALIZER;
/**
  Append \code
  item
  \endcode using .AND operator
  \param item Value to be appended to the boolean expression


  returns:
  Returns \code
  self
  \endcode so calls can be chained
*/
- (BooleanQuery * _Nonnull)and:(NSString * _Nonnull)item;
/**
  Append array of \code
  items
  \endcode using .AND operator to the expression but each item
  within the \code
  items
  \endcode are appended using \code
  op
  \endcode.
  For example:
  <h2>Q && (C || D)</h2>
  // Swift
  let eq1 = BooleanQuery()
  .OR(“Q”)
  .AND([“C”, “D”], .OR)
  // ObjC
  BooleanQuery *eq1 = [[BooleanQuery query:@“Q”] AND:@[@“C”, @“D”] op: BooleanQueryOpOR];
  <h2>Q && (C && D)</h2>
  // Swift
  let eq2 = BooleanQuery()
  .OR(“Q”)
  .AND([“C”, “D”], .AND)
  // ObjC
  BooleanQuery *eq2 = [[BooleanQuery query:@“Q”] AND:@[@“C”, @“D”] op: BooleanQueryOpAND];
  \param item Value to be appended to the boolean expression

  \param op Operator to be used between each items in the values when building the expression


  returns:
  Returns \code
  self
  \endcode so calls can be chained
*/
- (BooleanQuery * _Nonnull)and:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;
/**
  Append \code
  item
  \endcode to the expression using OR operator
  \param item Value to be appended to the boolean expression


  returns:
  Returns \code
  self
  \endcode so calls can be chained
*/
- (BooleanQuery * _Nonnull)or:(NSString * _Nonnull)item;
/**
  Append array of \code
  items
  \endcode using .OR operator but each item within the \code
  items
  \endcode
  are appended using \code
  op
  \endcode.
  For example:
  <h2>Q || (C || D)</h2>
  // Swift
  let eq1 = BooleanQuery()
  .OR(“Q”)
  .OR([“C”, “D”], .OR)
  // ObjC
  BooleanQuery *eq1 = [[BooleanQuery query:@“Q”] OR:@[@“C”, @“D”] op: BooleanQueryOpOR];
  <h2>Q || (C && D)</h2>
  // Swift
  let eq2 = BooleanQuery()
  .OR(“Q”)
  .OR([“C”, “D”], .AND)
  // ObjC
  BooleanQuery *eq2 = [[BooleanQuery query:@“Q”] OR:@[@“C”, @“D”] op: BooleanQueryOpAND];
  \param item Value to be appended to the boolean expression

  \param op Operator to be used between each items in the values when building the expression


  returns:
  Returns \code
  self
  \endcode so calls can be chained
*/
- (BooleanQuery * _Nonnull)or:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;
/**
  Constructs a \code
  BooleanQuery
  \endcode with the specified item negated
  \param item The item to negate


  returns:
  A \code
  BooleanQuery
  \endcode containing the negated item
*/
+ (BooleanQuery * _Nonnull)NOT:(NSString * _Nonnull)item;
/**
  Constructs a \code
  BooleanQuery
  \endcode with the specified list of items negated
  with each item separated by \code
  op
  \endcode.
  \param items The list of items to append to the boolean expression.

  \param op The operator to be used between each item specified in \code
  items
  \endcode.


  returns:
  A \code
  BooleanQuery
  \endcode containing the negated items
*/
+ (BooleanQuery * _Nonnull)NOT:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;
/**
  ANDs a negated version of the element in the resulting query string.
  \param item The item to negate as well as AND to the existing expression.


  returns:
  A \code
  BooleanQuery
  \endcode to allow for chained construction.
*/
- (BooleanQuery * _Nonnull)ANDNOT:(NSString * _Nonnull)item;
/**
  ANDs a negated version of the elements in the resulting query string.
  \param items The list of items to negate as well as AND to the existing expression.

  \param op The operator to be used between each item specified in \code
  items
  \endcode.


  returns:
  A \code
  BooleanQuery
  \endcode to allow for chained construction.
*/
- (BooleanQuery * _Nonnull)ANDNOT:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;
@end


@interface BooleanQuery (SWIFT_EXTENSION(FlybitsSDK))
/**
  Creates a BooleanQuery object with ‘item’
*/
+ (BooleanQuery * _Nonnull)query:(NSString * _Nonnull)item;
/**
  Creates a BooleanQuery object with ‘items’ where ‘op’ is used to combine each item in items.
*/
+ (BooleanQuery * _Nonnull)query:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;
@end

/**
  Supported operators for BooleanQuery when combining
  Multiple items together
*/
typedef SWIFT_ENUM(NSInteger, BooleanQueryOp) {
  BooleanQueryOpAnd = 0,
  BooleanQueryOpOr = 1,
};


@interface CLLocation (SWIFT_EXTENSION(FlybitsSDK))
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC10FlybitsSDK13CTX_Condition")
@interface CTX_Condition : NSManagedObject
- (nonnull instancetype)initWithLhs:(NSString * _Nonnull)lhs rhs:(NSString * _Nonnull)rhs weight:(double)weight op:(NSString * _Nonnull)op post:(NSString * _Nullable)post entity:(NSEntityDescription * _Nullable)entity context:(NSManagedObjectContext * _Nullable)context;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CTX_Condition (SWIFT_EXTENSION(FlybitsSDK))
@end


SWIFT_CLASS("_TtC10FlybitsSDK8CTX_Data")
@interface CTX_Data : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CTX_Data (SWIFT_EXTENSION(FlybitsSDK))
@end


SWIFT_CLASS("_TtC10FlybitsSDK8CTX_Rule")
@interface CTX_Rule : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CTX_Rule (SWIFT_EXTENSION(FlybitsSDK))
@end


SWIFT_CLASS("_TtC10FlybitsSDK19CarrierDataProvider")
@interface CarrierDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end


/**
  Condition represents a simple equation that will be evalued by the rules to consider
  whether or not the rule is valid.
*/
SWIFT_CLASS("_TtC10FlybitsSDK9Condition")
@interface Condition : NSObject
/**
  left hand side of the equation
*/
@property (nonatomic, copy) NSString * _Nullable lhs;
/**
  right hand side of the equation
*/
@property (nonatomic, copy) NSString * _Nullable rhs;
/**
  Operator to evaluate lhs and rhs
*/
@property (nonatomic, copy) NSString * _Nullable op;
/**
  Any post condition
*/
@property (nonatomic, copy) NSString * _Nullable post;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ContextDataPriority) {
  ContextDataPriorityAny = 0,
  ContextDataPriorityWifiOnly = 1,
};


enum ContextProvider : NSInteger;

/**
  The \code
  ContextManager
  \endcode allows for various pieces of context data to be registered for upload to the Flybits servers.
*/
SWIFT_CLASS("_TtC10FlybitsSDK14ContextManager")
@interface ContextManager : NSObject
/**
  Singleton access to the \code
  ContextManager
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ContextManager * _Nonnull sharedManager;)
+ (ContextManager * _Nonnull)sharedManager;
@property (nonatomic, readonly) BOOL isPolling;
@property (nonatomic) BOOL sentLatestValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Indicates whether or not the client has any active \code
  Rule
  \endcode subscriptions.

  returns:
  True when at least one \code
  Rule
  \endcode has a subscription, False otherwise.
*/
- (BOOL)hasRuleSubscription;
/**
  Indicates whether or not the client has subscribed to a given \code
  ruleName
  \endcode.
  \param ruleName The name of the rule to check for a subscription.

*/
- (BOOL)isSubscribedToRule:(NSString * _Nonnull)ruleName;
/**
  Toggles a subscription for a given \code
  ruleName
  \endcode. Default behaviour is to subscribe to a \code
  Rule
  \endcode.
  \param ruleName The name of the rule to add or remove a subscription.

  \param subscribe Whether to subscribe to or unsubscribe from a given \code
  Rule
  \endcode. Default value is true.

*/
- (void)updateRuleSubscription:(NSString * _Nonnull)ruleName subscribe:(BOOL)subscribe;
/**
  Retrieves the latest rules and their evaluation status.
  <em>NOTE: Added and/or updated rules are broadcast via NSNotificationCenter.</em>
*/
- (void)refreshRules;
/**
  Registers a given \code
  ContextDataProvider
  \endcode with the \code
  ContextManager
  \endcode that indicates the polling frequency (if any) as well as the upload frequency.
  <em>NOTE: If the provider already exists, the provider is updated – with new values for pollFrequency, uploadFrequency, and, priority and active is set to ‘true’ stored in core data.</em>
  \param provider The \code
  ContextDataProvider
  \endcode to register with the \code
  ContextManager
  \endcode - will be updated in the instance the provider exists already.

*/
- (id <ContextDataProvider> _Nullable)registerContextProvider:(id <ContextDataProvider> _Nonnull)provider withError:(NSError * _Nullable * _Nullable)error;
- (id <ContextDataProvider> _Nullable)registerSDKContextProvider:(enum ContextProvider)provider priority:(enum ContextDataPriority)priority pollFrequency:(NSInteger)pollFrequency uploadFrequency:(NSInteger)uploadFrequency;
- (id <ContextDataProvider> _Nullable)retrieveContextProvider:(enum ContextProvider)provider;
- (BOOL)removeContextProvider:(id <ContextDataProvider> _Nonnull)provider;
- (BOOL)removeSDKContextProvider:(enum ContextProvider)provider;
- (void)addDataForProvider:(id <ContextDataProvider> _Nonnull)provider;
- (void)startDataPolling;
- (void)stopDataPolling;
@end


/**
  Constants for various rule and context actions.
*/
SWIFT_CLASS("_TtC10FlybitsSDK23ContextManagerConstants")
@interface ContextManagerConstants : NSObject
/**
  \code
  com.flybits.context.rule
  \endcode This is the key for the rule object passed via a given Added or Changed notification.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextRule;)
+ (NSString * _Nonnull)ContextRule;
/**
  \code
  com.flybits.context.rule.added
  \endcode This is the broadcast topic when a rule is added to the \code
  ContextManager
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextRuleAdded;)
+ (NSString * _Nonnull)ContextRuleAdded;
/**
  \code
  com.flybits.context.rule.changed
  \endcode This is the broadcast topic when a rule’s \code
  lastResult
  \endcode has changed.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextRuleChanged;)
+ (NSString * _Nonnull)ContextRuleChanged;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ContextProvider) {
  ContextProviderActivity = 0,
  ContextProviderAudio = 1,
  ContextProviderAvailability = 2,
  ContextProviderBattery = 3,
  ContextProviderEddystone = 4,
  ContextProviderIBeacon = 5,
  ContextProviderCarrier = 6,
  ContextProviderCoreLocation = 7,
  ContextProviderLanguage = 8,
  ContextProviderNetwork = 9,
  ContextProviderOAuth = 10,
  ContextProviderPedometerSteps = 11,
};

@class CLHeading;
@class CLRegion;
@protocol CoreLocationDataProviderDelegate;
@class CLBeaconRegion;
@class CLLocationManager;
@class CLBeacon;
@class CLVisit;

/**
  The \code
  CoreLocationDataProvider
  \endcode is responsible for reporting location context data to the context servers. SDK users can allow the \code
  CoreLocationDataProvider
  \endcode to be the primary
*/
SWIFT_CLASS("_TtC10FlybitsSDK24CoreLocationDataProvider")
@interface CoreLocationDataProvider : NSObject <ContextDataProvider, CLLocationManagerDelegate>
@property (nonatomic, readonly) BOOL isCoreLocationManager;
/**
  If this plugin is managing the \code
  CLLocationManager
  \endcode this becomes a readonly passthrough, otherwise the value must be set by an external source.
*/
@property (nonatomic, strong) CLLocation * _Nullable location;
/**
  If this plugin is managing the \code
  CLLocationManager
  \endcode this becomes a readonly passthrough, otherwise the value must be set by an external source.
*/
@property (nonatomic, strong) CLHeading * _Nullable heading;
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  pausesLocationUpdatesAutomatically
  \endcode property.
*/
@property (nonatomic) BOOL pausesLocationUpdatesAutomatically;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  distanceFilter
  \endcode property.
*/
@property (nonatomic) CLLocationDistance distanceFilter;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  desiredAccuracy
  \endcode property.
*/
@property (nonatomic) CLLocationAccuracy desiredAccuracy;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  activityType
  \endcode property.
*/
@property (nonatomic) CLActivityType activityType;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  headingFilter
  \endcode property.
*/
@property (nonatomic) CLLocationDegrees headingFilter;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  headingOrientation
  \endcode property.
*/
@property (nonatomic) CLDeviceOrientation headingOrientation;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  allowsBackgroundLocationUpdates
  \endcode property.
*/
@property (nonatomic) BOOL allowsBackgroundLocationUpdates;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  monitoredRegions
  \endcode property.
*/
@property (nonatomic, readonly, copy) NSSet<CLRegion *> * _Nonnull monitoredRegions;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  maximumRegionMonitoringDistance
  \endcode property.
*/
@property (nonatomic, readonly) CLLocationDistance maximumRegionMonitoringDistance;
/**
  A passthrough for \code
  CLLocationManager
  \endcode’s \code
  rangedRegions
  \endcode property.
*/
@property (nonatomic, readonly, copy) NSSet<CLRegion *> * _Nonnull rangedRegions;
/**
  Creates a \code
  CoreLocationDataProvider
  \endcode for use in recording location context data.
  \param asCoreLocationManager Indicates whether or not this should be the primary \code
  CLLocationManager
  \endcode instance, if \code
  false
  \endcode the \code
  location
  \endcode and \code
  heading
  \endcode properties must be updated externally. Default value is \code
  true
  \endcode.

  \param authorization The desired \code
  CLAuthorizationStatus
  \endcode. Default value is \code
  AuthorizedWhenInUse
  \endcode.

*/
- (nonnull instancetype)initAsCoreLocationManager:(BOOL)asCoreLocationManager withRequiredAuthorization:(CLAuthorizationStatus)authorization OBJC_DESIGNATED_INITIALIZER;
/**
  Adds a delegate to the \code
  CoreLocationDataProvider
  \endcode’s list of delegates.
  \param delegate A \code
  class
  \endcode conforming to the \code
  CoreLocationDataProviderDelegate
  \endcode protocol.


  returns:
  \code
  true
  \endcode if the delegate was not previously registered, \code
  false
  \endcode otherwise.
*/
- (BOOL)addDelegate:(id <CoreLocationDataProviderDelegate> _Nonnull)delegate;
/**
  Removes a delegate from the \code
  CoreLocationDataProvider
  \endcode’s list of delegates.
  \param delegate A \code
  class
  \endcode conforming to the \code
  CoreLocationDataProviderDelegate
  \endcode protocol.


  returns:
  \code
  true
  \endcode if the delegate was removed successfully, \code
  false
  \endcode if the delegate was never registered.
*/
- (BOOL)removeDelegate:(id <CoreLocationDataProviderDelegate> _Nonnull)delegate;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)requestWhenInUseAuthorizationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)requestAlwaysAuthorizationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)startUpdatingLocationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)stopUpdatingLocationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)startMonitoringSignificantLocationChangesAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)stopMonitoringSignificantLocationChangesAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)startUpdatingHeadingAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)stopUpdatingHeadingAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)dismissHeadingCalibrationDisplayAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)startMonitoringFor:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)stopMonitoringFor:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)startRangingBeaconsIn:(CLBeaconRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)stopRangingBeaconsIn:(CLBeaconRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)requestStateFor:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)startMonitoringVisitsAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)stopMonitoringVisitsAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)allowDeferredLocationUpdatesUntilTraveled:(CLLocationDistance)distance timeout:(NSTimeInterval)timeout error:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)disallowDeferredLocationUpdatesAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  A passthrough for \code
  CLLocationManagerDelegate
  \endcode’s \code
  requestWhenInUseAuthorization
  \endcode function.
*/
- (BOOL)requestLocationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Tells the delegate that the authorization status for the application changed.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param status The new authorization status for the application.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
/**
  Tells the delegate about the state of the specified region.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param state The state of the specified region. For a list of possible values, see the \code
  CLRegionState
  \endcode type.

  \param region The region whose state was determined.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
/**
  Tells the delegate that the user entered the specified region.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param region An object containing information about the region that was entered.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
/**
  Tells the delegate that the user left the specified region.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param region An object containing information about the region that was exited.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
/**
  Tells the delegate that the location manager was unable to retrieve a location value.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object that was unable to retrieve the location.

  \param error The error object containing the reason the location or heading could not be retrieved.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
/**
  Tells the delegate that updates will no longer be deferred.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object that generated the update event.

  \param error The error object containing the reason deferred location updates could not be delivered.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFinishDeferredUpdatesWithError:(NSError * _Nullable)error;
/**
  Tells the delegate that one or more beacons are in range.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param beacons An array of \code
  CLBeacon
  \endcode objects representing the beacons currently in range.

  \param region The region object containing the parameters that were used to locate the beacons.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region;
/**
  Tells the delegate that a new region is being monitored.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param region The region that is being monitored.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didStartMonitoringForRegion:(CLRegion * _Nonnull)region;
/**
  Tells the delegate that the location manager received updated heading information.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object that generated the update event.

  \param newHeading The new heading data.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
/**
  Tells the delegate that new location data is available.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object that generated the update event.

  \param locations An array of \code
  CLLocation
  \endcode objects containing the location data.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/**
  Tells the delegate that a new visit-related event was received.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param visit The visit object that contains the information about the event.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager didVisit:(CLVisit * _Nonnull)visit;
/**
  Tells the delegate that a region monitoring error occurred.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param region The region for which the error occurred.

  \param error An error object containing the error code that indicates why region monitoring failed.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager monitoringDidFailForRegion:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
/**
  Tells the delegate that an error occurred while gathering ranging information for a set of beacons.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object reporting the event.

  \param region The region object that encountered the error.

  \param error An error object containing the error code that indicates why ranging failed.

*/
- (void)locationManager:(CLLocationManager * _Nonnull)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
/**
  Tells the delegate that location updates were paused.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object that paused the delivery of events.

*/
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager * _Nonnull)manager;
/**
  Tells the delegate that the delivery of location updates has resumed.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager that resumed the delivery of events.

*/
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager * _Nonnull)manager;
/**
  Asks the delegate whether the heading calibration alert should be displayed.
  <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
  \param manager The location manager object coordinating the display of the heading calibration alert.


  returns:
  true if you want to allow the heading calibration alert to be displayed; false if you do not.
*/
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager * _Nonnull)manager;
/**
  This function is called when the \code
  pollFrequency
  \endcode has elapsed.
  <em>NOTE: If this object is not polled (\code
  pollFrequency = nil
  \endcode), this method is not called.</em>
  \param completion The completion that will provide the \code
  ContextManager
  \endcode with data or an error as appropriate.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  The \code
  CoreLocationDataProviderDelegate
  \endcode protocol defines the interface required to receive updates from the \code
  CoreLocationDataProvider
  \endcode when it is acting as the primary \code
  CLLocationManager
  \endcode. No delegate updates will be published if \code
  CoreLocationDataProvider
  \endcode is not managing an instance of \code
  CLLocationManager
  \endcode.
*/
SWIFT_PROTOCOL("_TtP10FlybitsSDK32CoreLocationDataProviderDelegate_")
@protocol CoreLocationDataProviderDelegate
@optional
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didChangeAuthorization:(CLAuthorizationStatus)status;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didFailWithError:(NSError * _Nonnull)error;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didFinishDeferredUpdatesWithError:(NSError * _Nullable)error;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons in:(CLBeaconRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didStartMonitoringFor:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didVisit:(CLVisit * _Nonnull)visit;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider monitoringDidFailFor:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider rangingBeaconsDidFailFor:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
- (void)locationDataProviderDidPauseLocationUpdates:(CoreLocationDataProvider * _Nonnull)dataProvider;
- (void)locationDataProviderDidResumeLocationUpdates:(CoreLocationDataProvider * _Nonnull)dataProvider;
- (BOOL)locationDataProviderShouldDisplayHeadingCalibration:(CoreLocationDataProvider * _Nonnull)dataProvider;
@end


SWIFT_CLASS("_TtC10FlybitsSDK6Device")
@interface Device : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceType;)
+ (NSString * _Nonnull)deviceType;
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Tell Flybits which \code
  Zone
  \endcode / \code
  Moment
  \endcode that the current user using so analytics, context/rules engines and other internal states can be kept up-to-date. These calls should be made as soon as possible for analytics to be accurate as well as other components to function as expected.
  Example:
  // create a new query with type set to Zone and id set to \code
  Zone.id
  \endcode
  let query = DeviceQuery(type: DeviceQuery.EntityType.Zone, id: “ZONE_ID”, physicalID: “DEVICE_ID”)
  \code
  // tell flybits user is viewing the zone
  DeviceRequest.Connect(query) { error in
      if error == nil {
          // try making the request again
      }
  }.execute()


  // tell flybits user left the zone
  DeviceRequest.Disconnect(query) { error in
      if error == nil {
          // try making the request again
      }
  }.execute()

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK11DeviceQuery")
@interface DeviceQuery : Query
/**
  ID of the ZoneMoment or Zone - \code
  type
  \endcode should also reflect Moment / ZoneMoment - this property is named identifier in Objective-C.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
/**
  Convenience function to create a \code
  DeviceQuery
  \endcode for a \code
  Zone
  \endcode.
  \param identifier The identifier of the \code
  Zone
  \endcode.


  returns:
  A \code
  DeviceQuery
  \endcode reflecting the type of request and device id.
*/
+ (DeviceQuery * _Nonnull)queryForZoneIdentifier:(NSString * _Nonnull)identifier;
/**
  Convenience function to create a \code
  DeviceQuery
  \endcode for a \code
  ZoneMoment
  \endcode.
  \param id The identifier of the \code
  ZoneMoment
  \endcode.


  returns:
  A \code
  DeviceQuery
  \endcode reflecting the type of request and device id.
*/
+ (DeviceQuery * _Nonnull)queryForZoneMomentIdentifier:(NSString * _Nonnull)identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10FlybitsSDK9Eddystone")
@interface Eddystone : Beacon
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull beaconType;)
+ (NSString * _Nonnull)beaconType;
@property (nonatomic, readonly, copy, getter=namespace) NSString * _Nonnull namespace_;
@property (nonatomic, readonly, copy) NSString * _Nonnull instance;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly) NSInteger hashValue;
- (BOOL)isEqual:(id _Nullable)object;
- (void)update:(Beacon * _Nonnull)other;
- (nonnull instancetype)initWithStrength:(NSInteger)strength distance:(CLLocationDistance)distance batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange SWIFT_UNAVAILABLE;
@end


/**
  The \code
  EddystoneDataProvider
  \endcode provides information about Eddystones in the vicinity of the device.
*/
SWIFT_CLASS("_TtC10FlybitsSDK21EddystoneDataProvider")
@interface EddystoneDataProvider : BeaconDataProvider
/**
  Constructs an \code
  EddystoneDataProvider
  \endcode that acts as an \code
  EddystoneManagerDelegate
  \endcode to track Eddystone beacons.
*/
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency OBJC_DESIGNATED_INITIALIZER;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (void)didStartScan:(BeaconManager * _Nonnull)manager;
- (void)didStopScan:(BeaconManager * _Nonnull)manager;
- (void)didFindBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
- (void)didLoseBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
- (void)didUpdateBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
@end

@class OS_dispatch_queue;
enum FlybitsRequestType : NSInteger;

/**
  The base network request.
*/
SWIFT_CLASS("_TtC10FlybitsSDK14FlybitsRequest")
@interface FlybitsRequest : NSObject
/**
  Queue on which the completion block from response will be called. Uses main queue by default.
*/
@property (nonatomic, strong) OS_dispatch_queue * _Null_unspecified completionCallbackQueue;
/**
  Readonly access to the underlying NSURLRequest
*/
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable urlRequest;
/**
  Requests to wait before timing out when no data is retrieved – session is recreated so set this early as possible; Internally sets \code
  NSURLSessionConfiguration.timeoutIntervalForRequest
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSTimeInterval timeoutIntervalForRequest;)
+ (NSTimeInterval)timeoutIntervalForRequest;
+ (void)setTimeoutIntervalForRequest:(NSTimeInterval)value;
/**
  Constructs a new request based on an NSURLRequest.
  \param request An NSURLRequest object.

*/
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nullable)request requestType:(enum FlybitsRequestType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSURLRequest * _Nullable)request type:(enum FlybitsRequestType)type error:(NSError * _Nullable)error;
- (FlybitsRequest * _Nonnull)setWithHttpSuccessStatusCode:(NSInteger)httpSuccessStatusCode;
- (FlybitsRequest * _Nonnull)setHttpSuccessStatusCodeWithLowerBound:(NSInteger)lower upperBound:(NSInteger)upper;
/**
  Uses Generics to serialize the server’s response into an object of the specified type.
  \param withCompletion A closure that returns the original request, the response, the serialized object and an error.


  returns:
  A cancellable \code
  FlybitsRequest
  \endcode object.
*/
- (nonnull instancetype)responseWithCompletion:(void (^ _Nonnull)(NSURLRequest * _Nullable, NSHTTPURLResponse * _Nullable, NSData * _Nullable, NSError * _Nullable))completion;
/**
  Cancels a FlybitsRequest.
*/
- (FlybitsRequest * _Nonnull)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10FlybitsSDK18FlybitsRequestList")
@interface FlybitsRequestList : FlybitsRequest
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRequests:(NSArray<FlybitsRequest *> * _Nonnull)requests OBJC_DESIGNATED_INITIALIZER;
- (FlybitsRequest * _Nonnull)cancel;
- (void)add:(FlybitsRequest * _Nonnull)request;
- (void)remove:(FlybitsRequest * _Nonnull)request;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nullable)request requestType:(enum FlybitsRequestType)type SWIFT_UNAVAILABLE;
@end

/**
  A list of possible request types for a Requestable.
*/
typedef SWIFT_ENUM(NSInteger, FlybitsRequestType) {
/**
  A core request (inherent to Flybits core, i.e. \code
  Zone
  \endcode, \code
  User
  \endcode).
*/
  FlybitsRequestTypeCore = 0,
/**
  A rule request (\code
  Rule
  \endcode based requests).
*/
  FlybitsRequestTypeRules = 1,
/**
  A context data update request
*/
  FlybitsRequestTypeContextUpdate = 2,
/**
  A push request (\code
  APNS
  \endcode and \code
  MQTT
  \endcode based requests).
*/
  FlybitsRequestTypePush = 3,
/**
  A custom request (\code
  Moment
  \endcodes and other requests).
*/
  FlybitsRequestTypeCustom = 4,
};


@interface NSHTTPURLResponse (SWIFT_EXTENSION(FlybitsSDK))
@end

@class NSDictionary;

/**
  A wrapper class for image metadata and any loaded images (raw data or UIImage)
  Typical usage:
  \code
  image.URL().value
  image.URL(80%).value
  image.URL(60%).value
  image.URL(40%).value
  image.URL(20%).value

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK5Image")
@interface Image : NSObject
/**
  A placeholder image
*/
@property (nonatomic, strong) UIImage * _Nullable placeholderImage;
/**
  Override to pretty-print the \code
  Image
  \endcode’s description
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Override to pretty-print the \code
  Image
  \endcode’s debugDescription
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/**
  Creates an \code
  Image
  \endcode with a specified URL.
  \param URL The download URL for the image

*/
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/**
  Creates an \code
  Image
  \endcode with a server response.
  \param response The server response.

  \param representation The raw representation from the server response.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
/**
  Creates an \code
  Image
  \endcode with a raw response from the server and a list of locales.
  \param dictionary The localization section of an API response.

  \param locales A list of locale objects.

*/
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary locales:(NSArray<NSLocale *> * _Nullable)locales OBJC_DESIGNATED_INITIALIZER;
/**
  Retrieve the localized URL for a specified image size (default is 100%)
  \param size The desired size of the image.


  returns:
  A URL for the image based on the specified size.
*/
- (NSString * _Nullable)urlStringForSize:(enum ImageSize)size andLocale:(NSLocale * _Nullable)locale;
/**
  Loads an \code
  Image
  \endcode with a specified size and stores the raw \code
  NSData
  \endcode bytes internally.
  \param size The desired size of the image.

  \param locale The desired locale for the image.

  \param withCompletion A completion closure returning the image (with raw data included) or any errors.


  returns:
  A cancellable FlybitsRequest object.
*/
- (FlybitsRequest * _Nonnull)loadImageForSize:(enum ImageSize)size for:(NSLocale * _Nullable)locale completion:(void (^ _Nonnull)(Image * _Nonnull, NSError * _Nullable))completion;
/**
  Unloads an \code
  UIImage
  \endcode from this object for the specified size and locale.
  \param size The desired size of the image.

  \param locale The desired locale for the image.

*/
- (void)unloadImageForSize:(enum ImageSize)size;
/**
  Unloads all \code
  UIImage
  \endcodes from this object.
*/
- (void)unloadAllImages;
/**
  Unloads the raw data from this object for the specified size and locale.
  \param size The desired size of the image.

  \param locale The desired locale for the image.

*/
- (void)unloadRawForSize:(enum ImageSize)size;
/**
  Unloads all raw \code
  NSData
  \endcode objects from this object.
*/
- (void)unloadAllRaw;
/**
  Unloads all raw \code
  NSData
  \endcode and \code
  UIImage
  \endcode objects.
*/
- (void)unloadAll;
/**
  Returns a UIImage of specified size for a given locale, or default locale if none specified.
  \param size The desired size of the image.

  \param locale The desired locale. Passing nil uses the default locale.


  returns:
  A UIImage of specified size for the provided locale.
*/
- (UIImage * _Nullable)loadedImageForSize:(enum ImageSize)size for:(NSLocale * _Nullable)locale;
/**
  Returns the raw image data as downloaded for a given locale, or default locale if none specified.
  \param size The desired size of the image.

  \param locale The desired locale. Passing nil uses the default locale.


  returns:
  An NSData of the specified size for the provided locale.
*/
- (NSData * _Nullable)rawDataForSize:(enum ImageSize)size for:(NSLocale * _Nullable)locale;
/**
  Check to see if the Image has a valid URL for locale.
  \param locale NSLocale with valid NSLocaleLanguageCode set


  returns:
  true, if the image has a URL for the locale; false, otherwise.
*/
- (BOOL)imageAvailableFor:(NSLocale * _Nonnull)locale;
/**
  Check to see if the Image has a valid URL for languageCode.
  \param languageCode Language to check for URL. Two letter language code, i.e., ‘en’


  returns:
  true, if the image has a URL for the languageCode; false, otherwise.
*/
- (BOOL)imageAvailableForLanguageCode:(NSString * _Nonnull)languageCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Image (SWIFT_EXTENSION(FlybitsSDK))
/**
  Returns the default locale of this image as returned by server;
*/
- (NSLocale * _Nullable)defaultLocale;
@end

@class NSLocale;

@interface Image (SWIFT_EXTENSION(FlybitsSDK))
/**
  Returns the smallest image size that fits \code
  viewSize
  \endcode. i.e., if the original image is 300 by 300,
  then 5 different versions of those images are available.
  100% = 300 by 300
  80% = 240 by 240
  60% = 180 by 180
  40% = 120 by 120
  20% =  60 by  60
  and if you want to display that image inside an image view of 50 by 50, then downloading the
  ImageSize._20 makes sense since it’s the smallest ImageSize that can fit the size of your view.
  This function will return ImageSize._20 for this scenerio.
  \param viewSize size of your view

  \param locale locale of the image


  returns:
  Smallest image size thats fits your view’s \code
  viewSize
  \endcode. When the view size is bigger than original, it will
  return ImageSize._100.
*/
- (enum ImageSize)smallestBestFittingSizeForSizeWithViewSize:(CGSize)viewSize locale:(NSLocale * _Nullable)locale;
@end


SWIFT_CLASS("_TtC10FlybitsSDK13ImageMetadata")
@interface ImageMetadata : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull createdAt;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileName;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier url:(NSString * _Nonnull)url userId:(NSString * _Nonnull)userId createdAt:(NSString * _Nonnull)createdAt fileName:(NSString * _Nonnull)fileName width:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
/**
  Failable initializer that returns an \code
  ImageMetadata
  \endcode object based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Image size.
*/
typedef SWIFT_ENUM(NSInteger, ImageSize) {
/**
  Image @ 100%
*/
  ImageSize_100 = 0,
/**
  Image @ 80%
*/
  ImageSize_80 = 1,
/**
  Image @ 60%
*/
  ImageSize_60 = 2,
/**
  Image @ 40%
*/
  ImageSize_40 = 3,
/**
  Image @ 20%
*/
  ImageSize_20 = 4,
};


SWIFT_CLASS("_TtC10FlybitsSDK20LanguageDataProvider")
@interface LanguageDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
/**
  Retrieves battery information including percentage and whether or not the device is charging.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Metadata represents any key-value pair associated with Zone/Moment by the owner/manager of each entity.
  If the Zone represents a branch of your store, then you can specify if your branch is having a sale/promotion by setting metadata \code
  ["promotion-duration":"18-JAN-2016 TO 19-FEB-2016"]
  \endcode so when you display the Zones, you can parse out promotion-duration and indicate to the user that there is a promotion going on.
*/
SWIFT_CLASS("_TtC10FlybitsSDK8Metadata")
@interface Metadata : NSObject
/**
  Underlying storage for metadata properties (made public for Objective-C support
*/
@property (nonatomic, strong) NSDictionary * _Nonnull metadata;
/**
  Failable initializer that returns a \code
  Metadata
  \endcode object based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum PushMessageEntity : NSInteger;

/**
  A protocol to allow easy subscription and unsubscription from Flybits model objects.
*/
SWIFT_PROTOCOL("_TtP10FlybitsSDK16PushConfigurable_")
@protocol PushConfigurable
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;
@property (nonatomic, readonly, copy) NSString * _Nonnull route;
/**
  Subscribes the current object to push for the desired push \code
  type
  \endcode.
  \param type The type of notification desired.

*/
- (void)subscribeToPush;
/**
  Unsubscribes the current object to push for the desired push \code
  type
  \endcode.
  \param type The type of notification desired.

*/
- (void)unsubscribeFromPush;
@end


/**
  The \code
  Moment
  \endcode represents pieces of data/informations that a user can consume.
  A downloadable piece of content to provide new functionality to an existing
  app.
  \code
  Moment
  \endcodes can be anything from simple data such as websites, image
  galleries, and video to more complex pieces of data such as galleries,
  notes, and sensor-based information.
  A \code
  Moment
  \endcode is created from a template as you might create a \code
  Word Document
  \endcode
  from available templates. \code
  Moment.instanceID
  \endcode will tell you which template
  is used to create a \code
  Moment
  \endcode.
  Usually \code
  Moment
  \endcodes will be associated with a \code
  Zone
  \endcode and allows user to consume
  it when they connect to a \code
  Zone
  \endcode.
  You should never create instance of \code
  Moment
  \endcode yourself, instead, Flybits will
  create it for you when you call APIs to get moments.
  NOTE:
  Other than Flybit’s built \code
  Moment
  \endcodes, other \code
  Moment
  \endcodes are built by thirdparty and data from those \code
  Moment
  \endcodes are stored separately from the Flybits data – on their own third party servers. You might have to implement the user interface/logic for each Moment depending on what’s available to you. You should follow the Moments developers guidelines/APIs when creating a Moment.
*/
SWIFT_CLASS("_TtC10FlybitsSDK6Moment")
@interface Moment : NSObject <PushConfigurable>
/**
  Unique identifier – String format of \code
  UUID
  \endcode. NOTE: This is a \code
  ZoneMomentInstance
  \endcode ID.
*/
@property (nonatomic, copy) NSString * _Nonnull identifier;
/**
  Zone identifier – \code
  Zone.id
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull zoneID;
/**
  The identifier of the \code
  MomentInstance
  \endcode this \code
  Moment
  \endcode has been created by.
*/
@property (nonatomic, copy) NSString * _Nonnull momentInstanceID;
/**
  The identifier of the \code
  Moment
  \endcode template this \code
  Moment
  \endcode has been created by. I.E. Gallery, Poll
*/
@property (nonatomic, copy) NSString * _Nonnull momentID;
/**
  Package identifier of the moment (i.e. com.flybits.moments.users)
*/
@property (nonatomic, copy) NSString * _Nonnull packageName;
/**
  Launch URL to get the data from this moment’s server – consider looking at their developer guide/API Docs
*/
@property (nonatomic, copy) NSString * _Nonnull launchURL;
/**
  What HTTP method – POST, GET – should be used to retrieve data using \code
  launchURL
  \endcode
*/
@property (nonatomic, copy) NSString * _Nonnull launchURLType;
/**
  Whether the \code
  Moment
  \endcode should be automatically started.
*/
@property (nonatomic) BOOL isAutoRun;
/**
  Image that represents this \code
  Moment
  \endcode
*/
@property (nonatomic, strong) Image * _Nullable image;
/**
  Localizations for properties such as name, image.
*/
@property (nonatomic, strong) NSDictionary * _Nullable localizations;
/**
  Order of the \code
  Moment
  \endcode it should be displayed to user – default is -1.
*/
@property (nonatomic) NSInteger order;
/**
  Metadata – additional information about this \code
  Moment
  \endcode that can be modified from management console.
*/
@property (nonatomic, strong) Metadata * _Nullable metadata;
/**
  Whether or not the \code
  Moment
  \endcode is published.
*/
@property (nonatomic) BOOL published;
/**
  The date this Moment was created
*/
@property (nonatomic, copy) NSDate * _Nullable createdAt;
/**
  The date this Moment was modified
*/
@property (nonatomic, copy) NSDate * _Nullable lastModifiedAt;
/**
  The \code
  PushMessageEntity
  \endcode of this class (.ZoneMomentInstance)
*/
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;
/**
  The \code
  Moment
  \endcode’s hash value (used when treated as an \code
  NSObject
  \endcode).
*/
@property (nonatomic, readonly) NSUInteger hash;
/**
  IDs of the Tag that are associated with this Moment
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tagIDs;
/**
  The MQTT route for this Moment
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull route;
/**
  A debug description of the Moment
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/**
  A short description of the Moment
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Failable initializer that returns a \code
  Moment
  \endcode based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
/**
  Compares two moments for equality.
  \param object Another \code
  Moment
  \endcode (\code
  NSObject.isEqual()
  \endcode is used if object is not a \code
  Moment
  \endcode).


  returns:
  \code
  true
  \endcode if two \code
  Moment
  \endcodes have the same \code
  id
  \endcode, \code
  false
  \endcode otherwise.
*/
- (BOOL)isEqual:(id _Nullable)object;
/**
  Constructs a \code
  Moment
  \endcode from a cached object.
  \param mo An \code
  NSManagedObject
  \endcode version of the \code
  Moment
  \endcode.

*/
- (nullable instancetype)initWithMo:(NSManagedObject * _Nonnull)mo OBJC_DESIGNATED_INITIALIZER;
- (void)subscribeToPush;
- (void)unsubscribeFromPush;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Moment (SWIFT_EXTENSION(FlybitsSDK))
/**
  Objective-C wrapper - Get \code
  Moment
  \endcode’s name in the order of \code
  preferredLocale
  \endcode or \code
  defaultLocale
  \endcode.
*/
- (NSString * _Nullable)momentName;
/**
  Objective-C wrapper - Get \code
  Moment
  \endcode’s localized name for the specific locale with \code
  languageCode
  \endcode. Default value = “”
*/
- (NSString * _Nullable)localizedName:(NSLocale * _Nonnull)locale;
/**
  Returns the default locale defined by Moment owner; Can be null if you exclude defaultLocale when querying Moments
*/
- (NSLocale * _Nullable)defaultLocale;
@end


/**
  MomentAuthorizationResponse is returned by \code
  MomentRequest.GetAuthorization(...)
  \endcode which contains the authorization token as the payload. The token is then used to validate so moment’s API can be accessed.
*/
SWIFT_CLASS("_TtC10FlybitsSDK27MomentAuthorizationResponse")
@interface MomentAuthorizationResponse : NSObject
/**
  HTTPMethod that should be used to validate the ‘payload’
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull method;
/**
  Authorization token/payload
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull payload;
/**
  Override to pretty-print the \code
  MomentRequest
  \endcode’s description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MomentModule;

/**
  Maintains a registry to map \code
  Moment
  \endcode types and their implementations.
  Sample Code:
  \code
  let manager = MomentManager()

  // Moment Registration
  manager.registerModule("com.flybits.moments.speedial") { _, _, _ in
      return SpeeddialMoment()
  }
  manager.registerModule("com.flybits.moments.gallery") { _,_,_ in
      return loadMomentFromStoryboard("mm_image_gallery")
  }

  // Getting moment's module
  let moment = ...

  let module = manager.module(moment)

  if let module = module as? UIViewController {
      // display the view controller
  } else {
      // this moment doesn't have a view controller, so load it manually
      module.loadMoment(moment, info: self) { (data, error, otherInfo) -> Void in
          // do something with data
      }
  }

  // Unregister a module
  manager.unregisterModule("com.flybits.moments.speedial")

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK13MomentManager")
@interface MomentManager : NSObject
/**
  When a module is not registered for a package name, \code
  nonRegisteredModuleHanlder
  \endcode gets invoked where you can return  a module (by examining it’s type/launchURL/id etc…)
*/
@property (nonatomic, copy) id <MomentModule> _Nullable (^ _Nullable unregisteredModuleHandler)(MomentManager * _Nonnull, NSString * _Nonnull, Moment * _Nonnull);
/**
  Default constructor, does nothing.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Check wether a MomentModule was registered for a Moment with \code
  packageName
  \endcode.
  \param packageName packageName of the Moment to check against the registry.


  returns:
  \code
  true
  \endcode, if the packageName has a \code
  MomentModule
  \endcode registered previously using ‘MomentManager.registerModule(…)’, \code
  false
  \endcode, otherwise.
*/
- (BOOL)isModuleRegistered:(NSString * _Nonnull)packageName;
/**
  Get a MomentModuleCallback which can be invoked to get a new instance of MomentModule for packageName.
  You should always use \code
  MomentManager.module(...)
  \endcode, but since that already calls initialize on the module and if you don’t want that behaviour
  then use this. Also, if you have set \code
  nonRegisteredModuleHanlder
  \endcode, then if we don’t find any module for the packageName, then \code
  nonRegisteredModuleHanlder
  \endcode gets invoked to provide a module.
  \param packageName packageName of the Moment that was previously registered


  returns:
  MomentModuleCallback which can be invoked
*/
- (id <MomentModule> _Nullable (^ _Nullable)(MomentManager * _Nonnull, NSString * _Nonnull, Moment * _Nonnull))moduleCallback:(NSString * _Nonnull)packageName;
/**
  Get an instance of MomentModule for the Moment. Moment.packageName is used to get the MomentModule. If Moment.packageName wasn’t registered previously, nil is returned.
  \param moment Instance of a Moment with packageName already registered


  returns:
  Instance of \code
  MomentModule
  \endcode is returned if a packageName is registered for \code
  moment
  \endcode
*/
- (id <MomentModule> _Nullable)module:(Moment * _Nonnull)moment;
@end


/**
  Moment modules provide a way to load and unload data from a Moment
  <ol>
    <li>
      initialize is called with moment
    </li>
    <li>
      when everything is ready, allow module to load the moment… i.e., get data from web
    </li>
    <li>
      unload the moment, give time to clean up states
    </li>
  </ol>
*/
SWIFT_PROTOCOL("_TtP10FlybitsSDK12MomentModule_")
@protocol MomentModule
/**
  Access to the moment
*/
@property (nonatomic, readonly, strong) Moment * _Null_unspecified moment;
/**
  Initializes a MomentModule from a provided Moment
  \param moment An initialized moment.

*/
- (void)initialize:(Moment * _Nonnull)moment SWIFT_METHOD_FAMILY(none);
/**
  Loads the data for a specified moment.
  \param moment The moment to load.

  \param info A dictionary of [String:AnyObject] elements for user defined data.

*/
- (void)loadMoment:(Moment * _Nonnull)moment info:(id _Nullable)info;
/**
  Loads a moment with a callback
  \param moment The moment to load.

  \param info A dictionary of [String:AnyObject] elements for user defined data.

  \param withCompletion An optional completion that returns the moment’s raw data along with any errors encountered and the original info provided.

*/
- (void)loadMoment:(Moment * _Nonnull)moment info:(id _Nullable)info withCompletion:(void (^ _Nullable)(NSData * _Nullable, NSError * _Nullable, NSDictionary * _Nullable))completion;
/**
  Unloads a specified moment
  \param moment The moment to unload.

*/
- (void)unloadMoment:(Moment * _Nonnull)moment;
@end


/**
  Using \code
  MomentQuery
  \endcode, you can query for moments that are in certain zones,
  specific types of moments in a zone or get detail information of moments
  that you already have the ids. After creating a \code
  MomentQuery
  \endcode, you can
  execute it using \code
  MomentRequest.Query
  \endcode to actually make the request. Before
  creating your custom query, see if any of the cases defined in
  \code
  MomentRequest
  \endcode can be used.
  Example: Retrieve the first 10 video and gallery moments from “ZONEID1” or “ZONEID2”.
  let query = MomentQuery(limit:10, offset:0)
  query.zoneIDs = [“ZONEID1”, “ZONEID2”]
  // assuming momentID of video is “MOMENT_VIDEO_ID” and
  // gallery is “MOMENT_GALLERY_ID”
  query.momentInstanceIDs = [“MOMENT_VIDEO_ID”, “MOMENT_GALLERY_ID”]
  Example: Retrieve moment details for “MOMENT1”, “MOMENT2”, “MOMENT3”
  let query = MomentQuery(limit:100, offset:0)
  query.momentIDs = [“MOMENT1”, “MOMENT2”, “MOMENT3”]
*/
SWIFT_CLASS("_TtC10FlybitsSDK11MomentQuery")
@interface MomentQuery : Query
/**
  Retrieve moments that are part of this list of \code
  Zone
  \endcode identifiers.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable zoneIDs;
/**
  Retrieve specific moments via their \code
  id
  \endcode property.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentIDs;
/**
  get moments that are instances of moments with id in \code
  momentInstanceIDs
  \endcode
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentInstanceIDs;
/**
  Retrieve moments based on ids of Tag that are associated
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagIDs;
/**
  Returns key-value pair for API requests.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MomentQuery (SWIFT_EXTENSION(FlybitsSDK))
@property (nonatomic, strong) NSNumber * _Nullable isPublished;
@property (nonatomic, strong) NSNumber * _Nullable isAutorun;
@end


/**
  This class defines a list of constants for properties that can be included/excluded in a given API request.
*/
SWIFT_CLASS("_TtC10FlybitsSDK20MomentQueryConstants")
@interface MomentQueryConstants : NSObject
/**
  “auxiliaryAncestorProperties”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AuxiliaryAncestorProperties;)
+ (NSString * _Nonnull)AuxiliaryAncestorProperties;
/**
  “createdAt”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CreatedAt;)
+ (NSString * _Nonnull)CreatedAt;
/**
  “id”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ID;)
+ (NSString * _Nonnull)ID;
/**
  “isAutoRun”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsAutoRun;)
+ (NSString * _Nonnull)IsAutoRun;
/**
  “isPublished”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsPublished;)
+ (NSString * _Nonnull)IsPublished;
/**
  “lastModifiedAt”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LastModifiedAt;)
+ (NSString * _Nonnull)LastModifiedAt;
/**
  “momentInstanceId”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MomentInstanceID;)
+ (NSString * _Nonnull)MomentInstanceID;
/**
  “order”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Order;)
+ (NSString * _Nonnull)Order;
/**
  “zoneId”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ZoneID;)
+ (NSString * _Nonnull)ZoneID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10FlybitsSDK15MonitoredBeacon")
@interface MonitoredBeacon : NSObject
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) NSInteger hashValue;
- (BOOL)isEqual:(id _Nullable)object;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, BeaconType) {
  BeaconTypeIBeacon = 0,
  BeaconTypeEddystone = 1,
  BeaconTypeUnknown = 2,
};


@interface NSObject (SWIFT_EXTENSION(FlybitsSDK))
@end


/**
  A structure containing many constants used internally in the SDK
*/
SWIFT_CLASS("_TtC10FlybitsSDK7Network")
@interface Network : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A class containing a number of constants used for Networking purposes.
*/
SWIFT_CLASS("_TtC10FlybitsSDK16NetworkConstants")
@interface NetworkConstants : NSObject
/**
  The maximum number of records the server can return in one request (500)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger APIMaxRecords;)
+ (NSUInteger)APIMaxRecords;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  The \code
  NetworkDataProvider
  \endcode allows use of the SSID and connection type contexts.
*/
SWIFT_CLASS("_TtC10FlybitsSDK19NetworkDataProvider")
@interface NetworkDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
/**
  Retrieves Network information such as internet reachability and whether the device is on WiFi and the SSID (if any).
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest context data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OAuthConsentViewControllerDelegate;
@class WKWebView;
@class WKNavigationAction;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC10FlybitsSDK26OAuthConsentViewController")
@interface OAuthConsentViewController : UIViewController <WKNavigationDelegate>
@property (nonatomic, strong) id <OAuthConsentViewControllerDelegate> _Nullable delegate;
- (void)loadView;
- (void)performOAuthRequest;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10FlybitsSDK34OAuthConsentViewControllerDelegate_")
@protocol OAuthConsentViewControllerDelegate
- (void)controllerDidFinishSuccessfully:(OAuthConsentViewController * _Nonnull)controller;
- (void)controller:(OAuthConsentViewController * _Nonnull)controller didFailWithError:(NSError * _Nonnull)error;
@end


/**
  If there are lot of items to be returned, for performance reason, pagination should be used. Even if you do not indicate pagination, response might be paginated.
  By setting \code
  limit
  \endcode and \code
  offset
  \endcode, you can retrieve different “pages” of data. For example, you might want to display first 20 items (zones/moments/users/etc). So, by using pagination as shown below, you will receive the first 20 items.
  \code
  // First 20 items or first page with 20 items
  let pager = Pager(limit:20, offset:0)

  \endcodeTo get the next page or next 20 items:
  \code
  // Second 20 items or second page with 20 items
  let pager = Pager(limit:20, offset:20)

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK5Pager")
@interface Pager : NSObject
/**
  Maximum number of results that can be returned in a paged API call.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger MaxResults;)
+ (NSUInteger)MaxResults;
/**
  The maximum number of records to return on this page.
*/
@property (nonatomic, readonly) NSUInteger limit;
/**
  The offset into the total number of records at which to start the result set.
*/
@property (nonatomic, readonly) NSUInteger offset;
/**
  Failable initializer that returns a \code
  Pager
  \endcode based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
/**
  Updates the pager to a specific page index (limit/offset calculation is done for you)
  \param pageIndex The page number.

*/
- (void)goto:(NSUInteger)pageIndex;
/**
  Converts the pager into a dictionary (used when sent via an API request).

  returns:
  A dictionary containing the \code
  limit
  \endcode and \code
  offset
  \endcode properties.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Convenience function to determine if the result set is at the end of the list.

  returns:
  \code
  true
  \endcode if there are additional results through which to page, \code
  false
  \endcode otherwise.
*/
- (BOOL)hasMore;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Pager (SWIFT_EXTENSION(FlybitsSDK))
/**
  A public constructor for Objective-C clients.
  \param limit The maximum number of records to return.

  \param offset The offset into the record set.


  returns:
  A Pager object representing the provided limit and offset.
*/
+ (Pager * _Nonnull)pagerWithLimit:(NSUInteger)limit andOffset:(NSUInteger)offset;
@end

@class CMPedometer;

SWIFT_CLASS("_TtC10FlybitsSDK26PedometerStepsDataProvider")
@interface PedometerStepsDataProvider : NSObject <ContextDataProvider>
/**
  The category of context in which the data provided is stored, i.e. flybits.ctx.location
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;
/**
  The frequency at which this context plugin is polled for data.
  <em>NOTE: nil implies this Context Plugin will push data to the \code
  ContextManager
  \endcode</em>
*/
@property (nonatomic) int32_t pollFrequency;
/**
  The frequency at which this context plugin will upload data.
  <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
*/
@property (nonatomic) int32_t uploadFrequency;
/**
  Whether or not this plugin will broadcast on any network or WiFi only.
*/
@property (nonatomic) enum ContextDataPriority priority;
@property (nonatomic, strong) CMPedometer * _Null_unspecified pedometer;
/**
  Using the \code
  SharedHealthStore
  \endcode, this function retrieves the step count for today.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest context data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum PushServiceLevel : NSInteger;

/**
  A set of configurable properties for the push manager.
  Currently, the service level and APNS token are supported.
*/
SWIFT_CLASS("_TtC10FlybitsSDK17PushConfiguration")
@interface PushConfiguration : NSObject
/**
  The level of service desired.
*/
@property (nonatomic) enum PushServiceLevel serviceLevel;
/**
  Whether or not Flybits Data should be fetched automatically when a push is received.
*/
@property (nonatomic) BOOL autoFetchData;
/**
  Whether or not Foreground push should attempt a reconnection (either for an expired JWT or any other reason).
*/
@property (nonatomic) BOOL autoReconnect;
/**
  Additional key/value pairs to send during device registraiton
*/
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable deviceRegistrationData;
/**
  Automatically saves preferences when subscribing to any of the models (Zone, Moment, … etc)
*/
@property (nonatomic) BOOL autoSavePushPreferences;
/**
  The APNS token received after registration
*/
@property (nonatomic, copy) NSData * _Nullable apnsToken;
/**
  A constructor for the \code
  PushConfiguration
  \endcode, makes a request to register the token with the server if the user is logged in.
  \param serviceLevel The desired level of service.

  \param apnsToken The APNS token returned via application:didRegisterForRemoteNotificationsWithDeviceToken:.

*/
- (nonnull instancetype)initWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nullable)apnsToken autoFetchData:(BOOL)autoFetchData autoReconnect:(BOOL)autoReconnect deviceRegistrationData:(NSDictionary<NSString *, id> * _Nullable)deviceRegistrationData OBJC_DESIGNATED_INITIALIZER;
/**
  A convenience function for creating a \code
  PushConfiguration
  \endcode with a pre-defined \code
  PushServiceLevel
  \endcode.
  \param serviceLevel The desired \code
  PushServiceLevel
  \endcode.


  returns:
  A \code
  PushConfiguration
  \endcode.
*/
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel;
/**
  A convenience function for creating a \code
  PushConfiguration
  \endcode with a pre-defined \code
  PushServiceLevel
  \endcode and APNS token.
  \param serviceLevel The desired \code
  PushServiceLevel
  \endcode.

  \param andAPNSToken The App’s APNS token.


  returns:
  A \code
  PushConfiguration
  \endcode.
*/
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel andAPNSToken:(NSData * _Nonnull)apnsToken;
/**
  A convenience function for creating a \code
  PushConfiguration
  \endcode with a pre-defined \code
  PushServiceLevel
  \endcode, APNS token and an option for additional key-value-pairs to be passed to the device registration server.
  \param serviceLevel The desired \code
  PushServiceLevel
  \endcode.

  \param apnsToken The App’s APNS token.

  \param andDeviceRegistrationData Additional data that will be passed in key-value-pairs to the device registration server.


  returns:
  A \code
  PushConfiguration
  \endcode.
*/
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken andDeviceRegistrationData:(NSDictionary<NSString *, id> * _Nonnull)deviceRegistrationData;
/**
  A convenience function for creating a \code
  PushConfiguration
  \endcode with a pre-defined \code
  PushServiceLevel
  \endcode, APNS token and whether or not the SDK should fetch objects from Core pushes.
  \param serviceLevel The desired \code
  PushServiceLevel
  \endcode.

  \param apnsToken The App’s APNS token.

  \param andAutoFetchData Whether or not the SDK should fetch objects from Core pushes.


  returns:
  A \code
  PushConfiguration
  \endcode.
*/
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken andAutoFetchData:(BOOL)autoFetchData;
/**
  A convenience function for creating a \code
  PushConfiguration
  \endcode with a pre-defined \code
  PushServiceLevel
  \endcode, APNS token, whether or not the SDK should fetch objects from Core pushes and whether or not the SDK should attempt to reconnect when the connection is lost.
  \param serviceLevel The desired \code
  PushServiceLevel
  \endcode.

  \param apnsToken The App’s APNS token.

  \param autoFetchData Whether or not the SDK should fetch objects from Core pushes.

  \param andAutoReconnect Whether or not the SDK should reconnect when a service interruption occurs or if a JWT has expired.


  returns:
  A \code
  PushConfiguration
  \endcode.
*/
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken autoFetchData:(BOOL)autoFetchData andAutoReconnect:(BOOL)autoReconnect;
/**
  A convenience function for creating a \code
  PushConfiguration
  \endcode with a pre-defined \code
  PushServiceLevel
  \endcode, APNS token, whether or not the SDK should fetch objects from Core pushes, whether or not the SDK should attempt to reconnect when the connection is lost and an option for additional key-value-pairs to be passed to the device registration server.
  \param serviceLevel The desired \code
  PushServiceLevel
  \endcode.

  \param apnsToken The App’s APNS token.

  \param autoFetchData Whether or not the SDK should fetch objects from Core pushes.

  \param autoReconnect Whether or not the SDK should reconnect when a service interruption occurs or if a JWT has expired.

  \param andDeviceRegistrationData Additional data that will be passed in key-value-pairs to the device registration server.


  returns:
  A \code
  PushConfiguration
  \endcode.
*/
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken autoFetchData:(BOOL)autoFetchData autoReconnect:(BOOL)autoReconnect andDeviceRegistrationData:(NSDictionary<NSString *, id> * _Nonnull)deviceRegistrationData;
/**
  Updates the APNS token on Flybits push servers. Will be attempted when \code
  PushConfiguration
  \endcode is constructed or when APNS token is directly provided.
  <em>NOTE: This requires a user to be logged in to Flybits, can be called manually if required. Also, any properties saved in \code
  PushConfiguration.deviceRegistrationData
  \endcode will be passed along</em>
*/
- (void)updateTokenOnServer:(NSData * _Nonnull)token deviceRegistrationData:(NSDictionary<NSString *, id> * _Nullable)deviceRegistrationData withCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Removes user specified device registration data from the SDK.
*/
- (void)clearDeviceRegistrationData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Manages handling Flybits related push messages.
  When a \code
  PushConfiguration
  \endcode is provided, it will automatically connect, if required. The \code
  PushManager
  \endcode requires a user to be logged in before connecting.
*/
SWIFT_CLASS("_TtC10FlybitsSDK11PushManager")
@interface PushManager : NSObject
/**
  Singleton access to the \code
  PushManager
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PushManager * _Nonnull sharedManager;)
+ (PushManager * _Nonnull)sharedManager;
/**
  The configuration of the push manager, includes service level (i.e. foreground / background).
*/
@property (nonatomic, strong) PushConfiguration * _Nonnull configuration;
/**
  The background push preferences
*/
@property (nonatomic, readonly, strong) APNSPreferences * _Nonnull backgroundPreferences;
/**
  Used to pass APNS notifications to the \code
  PushManager
  \endcode.
  \param notification An APNS notification.

  \param fetchCompletionHandler The optional \code
  fetchCompletionHandler
  \endcode to call back if async data needs to be retrieved.


  returns:
  \code
  true
  \endcode if the content was decoded properly (i.e. a properly formatted SDK push notification), \code
  false
  \endcode if the content is not in the proper format (i.e. a push notification not intended for the SDK or a mangled push message).
*/
- (BOOL)receivedNotification:(NSDictionary<NSString *, id> * _Nonnull)notification fetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler;
/**
  Allows developers to subscribe to \code
  Foreground
  \endcode notifications for a free-form topic.
  \param topic The topic to subscribe, i.e. Zone.Modified

*/
- (void)subscribeToTopic:(NSString * _Nonnull)topic;
/**
  Allows developers to unsubscribe from \code
  Foreground
  \endcode notifications for a free-form topic.
  \param topic The topic to unsubscribe, i.e. Zone.Modified

*/
- (void)unsubscribeFromTopic:(NSString * _Nonnull)topic;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A class containing a number of constants used with PushManager.
*/
SWIFT_CLASS("_TtC10FlybitsSDK20PushManagerConstants")
@interface PushManagerConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull PushConnected;)
+ (NSNotificationName _Nonnull)PushConnected;
/**
  \code
  com.flybits.push.disconnected
  \endcode - The broadcast topic when an MQTT connection has been lost / disconnected.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull PushDisconnected;)
+ (NSNotificationName _Nonnull)PushDisconnected;
/**
  \code
  com.flybits.push.fetchError
  \endcode - A key to identify that an error was encountered while performing a fetch.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PushFetchError;)
+ (NSString * _Nonnull)PushFetchError;
/**
  \code
  com.flybits.push.content
  \endcode - The content of the push data (a \code
  PushMessage
  \endcode).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PushMessageContent;)
+ (NSString * _Nonnull)PushMessageContent;
/**
  \code
  com.flybits.push.error.data
  \endcode - The error returned when an error is encountered by the \code
  PushManager
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PushErrorData;)
+ (NSString * _Nonnull)PushErrorData;
/**
  \code
  com.flybits.push.error
  \endcode - The broadcast topic when an error is encountered by the \code
  PushManager
  \endcode (used for \code
  NSNotificationCenter
  \endcode subscriptions).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull PushErrorTopic;)
+ (NSNotificationName _Nonnull)PushErrorTopic;
/**
  \code
  com.flybits.push.preferencesError
  \endcode - The broadcast topic when an error is encountered with push preferences (save or load).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull PushPreferencesErrorTopic;)
+ (NSNotificationName _Nonnull)PushPreferencesErrorTopic;
/**
  \code
  com.flybits.push.preferencesUpdated
  \endcode - The broadcast topic when a preference has been successfully updated on the server.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull PushPreferencesUpdatedTopic;)
+ (NSNotificationName _Nonnull)PushPreferencesUpdatedTopic;
/**
  \code
  com.flybits.push.error.type
  \endcode - The type of error encountered which triggered an error broadcast (See: \code
  PushManagerErrorConstants
  \endcode)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PushErrorType;)
+ (NSString * _Nonnull)PushErrorType;
/**
  \code
  com.flybits.push.fetchedContent
  \endcode - The SDK object fetched via an API call (typically a \code
  Zone
  \endcode or \code
  Moment
  \endcode).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PushFetchedContent;)
+ (NSString * _Nonnull)PushFetchedContent;
/**
  \code
  com.flybits.push.source
  \endcode - The source network of the push data (APNS or MQTT).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PushSourceNetwork;)
+ (NSString * _Nonnull)PushSourceNetwork;
/**
  \code
  com.flybits.push.sourceContent
  \endcode - Any additional content passed by the \code
  PushSource
  \endcode (i.e. the aps content of an APNS message).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SourceContent;)
+ (NSString * _Nonnull)SourceContent;
/**
  \code
  com.flybits.push.tokenError
  \endcode - Encountered error while attempting to update token on the Push server.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull PushTokenError;)
+ (NSNotificationName _Nonnull)PushTokenError;
/**
  \code
  com.flybits.push.tokenUpdated
  \endcode - Token was successfully updated with the Push server.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull PushTokenUpdated;)
+ (NSNotificationName _Nonnull)PushTokenUpdated;
/**
  \code
  com.flybits.push.underlyingErrors
  \endcode - Any additional errors encountered during the request.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UnderlyingErrors;)
+ (NSString * _Nonnull)UnderlyingErrors;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A list of error codes that can be issued by the \code
  PushManager
  \endcode.
*/
SWIFT_CLASS("_TtC10FlybitsSDK25PushManagerErrorConstants")
@interface PushManagerErrorConstants : NSObject
/**
  \code
  com.flybits.push.error.fetchEmpty
  \endcode - An error indicating that no data was returned when a fetch was attempted.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FetchEmpty;)
+ (NSString * _Nonnull)FetchEmpty;
/**
  \code
  com.flybits.push.error.parse
  \endcode - An error indicating that a \code
  PushMessage
  \endcode was not able to be constructed with the push payload.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Parse;)
+ (NSString * _Nonnull)Parse;
/**
  \code
  com.flybits.push.error.payloadEmpty
  \endcode - An error indicating that the ‘aps’ portion of an APNS payload was missing.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PayloadEmpty;)
+ (NSString * _Nonnull)PayloadEmpty;
/**
  \code
  com.flybits.push.error.payloadData
  \endcode - An error indicating that the ‘data’ portion of an APNS payload was missing.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PayloadData;)
+ (NSString * _Nonnull)PayloadData;
/**
  \code
  com.flybits.push.error.payloadFormat
  \endcode - An error indicating that the ‘data’ portion of an APNS payload was not formatted as a base64 encoded string.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PayloadFormat;)
+ (NSString * _Nonnull)PayloadFormat;
/**
  \code
  com.flybits.push.error.tokenRegistration
  \endcode - An error indicating that an issue was encountered while registering an APNS token with the Push server, check the value of the \code
  com.flybits.push.error.data
  \endcode element to get an NSError object
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenRegistration;)
+ (NSString * _Nonnull)TokenRegistration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum PushMessageCategory : NSInteger;
enum PushMessageAction : NSInteger;

SWIFT_CLASS("_TtC10FlybitsSDK11PushMessage")
@interface PushMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) NSInteger version;
@property (nonatomic, readonly) enum PushMessageCategory category;
@property (nonatomic, readonly) enum PushMessageEntity entity;
@property (nonatomic, readonly) enum PushMessageAction action;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawAction;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull alert;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable body;
@property (nonatomic, readonly) NSNotificationName _Nonnull notificationType;
@property (nonatomic, readonly) NSNotificationName _Nonnull completeNotificationType;
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
+ (NSNotificationName _Nonnull)NotificationType:(enum PushMessageEntity)entity action:(enum PushMessageAction)action;
+ (NSNotificationName _Nonnull)CompleteNotificationType:(enum PushMessageEntity)entity action:(enum PushMessageAction)action rawAction:(NSString * _Nonnull)rawAction;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, PushMessageAction) {
  PushMessageActionCreated = 0,
  PushMessageActionModified = 1,
  PushMessageActionDeleted = 2,
  PushMessageActionLoggedIn = 3,
  PushMessageActionLoggedOut = 4,
  PushMessageActionStatusChanged = 5,
  PushMessageActionEntered = 6,
  PushMessageActionZoneEntered = 7,
  PushMessageActionExited = 8,
  PushMessageActionZoneExited = 9,
  PushMessageActionRoleModified = 10,
  PushMessageActionMomentModified = 11,
  PushMessageActionMomentRoleModified = 12,
  PushMessageActionMomentDeleted = 13,
  PushMessageActionRuleAssociated = 14,
  PushMessageActionRuleDisassociated = 15,
  PushMessageActionRuleUpdated = 16,
  PushMessageActionMomentRuleAssociated = 17,
  PushMessageActionMomentRuleDisassociated = 18,
  PushMessageActionMomentRuleUpdated = 19,
  PushMessageActionCustom = 20,
};

typedef SWIFT_ENUM(NSInteger, PushMessageCategory) {
  PushMessageCategoryCore = 0,
  PushMessageCategoryContext = 1,
  PushMessageCategoryLocation = 2,
  PushMessageCategoryMoment = 3,
  PushMessageCategorySocial = 4,
  PushMessageCategoryCustom = 5,
};

typedef SWIFT_ENUM(NSInteger, PushMessageEntity) {
  PushMessageEntityZone = 0,
  PushMessageEntityMomentInstance = 1,
  PushMessageEntityZoneMomentInstance = 2,
  PushMessageEntityUser = 3,
  PushMessageEntityTag = 4,
  PushMessageEntityRuleTemplate = 5,
  PushMessageEntityRule = 6,
  PushMessageEntityRequest = 7,
  PushMessageEntityBlock = 8,
  PushMessageEntityMessage = 9,
  PushMessageEntityCustom = 10,
};

@class NSDate;
enum PushQuerySortOrder : NSInteger;

/**
  Used for filtering the results of the \code
  PushRequest.NotificationHistory
  \endcode API.
*/
SWIFT_CLASS("_TtC10FlybitsSDK9PushQuery")
@interface PushQuery : Query
/**
  The start date of the query (optional, default nil)
*/
@property (nonatomic, strong) NSDate * _Nullable start;
/**
  The end date of the query (optional, default nil)
*/
@property (nonatomic, strong) NSDate * _Nullable end;
@property (nonatomic) enum PushQuerySortOrder sortOrder;
/**
  Converts the query to key-value pairs for use in constructing a query string.

  returns:
  A dictionary containing the relevant key-value pairs to construct a query string.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/**
  This enum represents the sort orders for the \code
  PushQuery
  \endcode
*/
typedef SWIFT_ENUM_NAMED(NSInteger, PushQuerySortOrder, "SortOrder") {
/**
  Results should be sorted in \code
  Ascending
  \endcode order
*/
  PushQuerySortOrderAscending = 0,
/**
  Results should be sorted in \code
  Descending
  \endcode order
*/
  PushQuerySortOrderDescending = 1,
};

/**
  The desired service level
*/
typedef SWIFT_ENUM(NSInteger, PushServiceLevel) {
/**
  No push notifications will be received.
*/
  PushServiceLevelNone = 0,
/**
  Foreground push notifications will be received via \code
  NSNotificationCenter
  \endcode
*/
  PushServiceLevelForeground = 1,
/**
  Background push notifications will be received via \code
  NSNotificationCenter
  \endcode
*/
  PushServiceLevelBackground = 2,
/**
  Foreground and Background push notifications will be received via \code
  NSNotificationCenter
  \endcode
*/
  PushServiceLevelBoth = 3,
};

/**
  Defines a source for the origin of the \code
  PushMessage
  \endcode.
*/
typedef SWIFT_ENUM(NSInteger, PushSource) {
/**
  An Apple Push Notification Service message.
*/
  PushSourceApns = 0,
/**
  A MQ Telemetry Transport
*/
  PushSourceMqtt = 1,
};



/**
  Represents Rule defined for Context engine to execute. Context engine evalues the rule
  to provide context.
  For example, using a rule and condition, you can define,
  “remind me to run when the weather is > 20 degree celsius every morning”.
*/
SWIFT_CLASS("_TtC10FlybitsSDK4Rule")
@interface Rule : NSObject
/**
  Name of the rule
*/
@property (nonatomic, copy) NSString * _Nullable name;
/**
  Threadhold the rule has to pass in order to consider valid
*/
@property (nonatomic) double threshold;
/**
  Conditions to be evaluted for this rule to become valid
*/
@property (nonatomic, copy) NSArray<Condition *> * _Nullable conditions;
/**
  Variables used in this Rule (i.e. ctx.location)
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable variables;
/**
  Unique identifier for the Rule
*/
@property (nonatomic, copy) NSString * _Nullable identifier;
/**
  Failable initializer that returns a \code
  Rule
  \endcode based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SessionConfiguration;
enum SessionStatus : NSInteger;

/**
  Specific settings for current session. When a user logs into Flybits, \code
  Session.sharedInstance.currentUser
  \endcode is updated with that \code
  User
  \endcode object. So, at anytime you can query currently logged in user.
  Also, you can point to which Flybits servers (Development, Production, etc.) that SDK points to by setting custom \code
  SessionConfiguration
  \endcode by creating a new \code
  Session
  \endcode class.
*/
SWIFT_CLASS("_TtC10FlybitsSDK7Session")
@interface Session : NSObject
/**
  Singleton access to the session, has \code
  set
  \endcode option to build a session with a different configuration.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Session * _Nonnull sharedInstance;)
+ (Session * _Nonnull)sharedInstance;
+ (void)setSharedInstance:(Session * _Nonnull)session;
@property (nonatomic, strong) NSDictionary * _Null_unspecified configurableSettings;
/**
  \code
  SessionConfiguration
  \endcode used to configure the active session.
*/
@property (nonatomic, readonly, strong) SessionConfiguration * _Nonnull configuration;
/**
  Creates a new \code
  Session
  \endcode with the provided \code
  SessionConfiguration
  \endcode, if none is provided, the default configuration is used.
  \param configuration A \code
  SessionConfiguration
  \endcode.

  \param pushConfiguration A \code
  PushConfiguration
  \endcode.

*/
- (nonnull instancetype)initWithSessionConfiguration:(SessionConfiguration * _Nonnull)sessionConfiguration OBJC_DESIGNATED_INITIALIZER;
/**
  The user’s JSON Web Token, used for authorization with Flybits servers.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable jwt;
/**
  Whether or not the session is connected / logged in
*/
@property (nonatomic) BOOL isConnected;
/**
  The current status of the session (starts at .Disconnected)
*/
@property (nonatomic) enum SessionStatus status;
/**
  Reference to the currently logged-in user.
*/
@property (nonatomic, strong) User * _Nullable currentUser;
/**
  Whether or not the SDK should use the \code
  CoreLocationDataProvider
  \endcode to determine the user’s location. Default value is false.
*/
@property (nonatomic) BOOL trackLocation;
/**
  A reference to the \code
  PushManager
  \endcode
*/
@property (nonatomic, strong) PushManager * _Nullable pushManager;
/**
  Whether or not the \code
  rememberMe
  \endcode token has been saved from a previous login.<br /><br />
  \code
  true
  \endcode - rememberMe tokens is saved, no need to login<br />
  \code
  false
  \endcode - rememberMe tokens are not saved – login is required using \code
  SessionRequest.*Login*
  \endcode
*/
- (BOOL)canLoginUsingSessionToken;
/**
  Removes the login tokens that was stored on login when rememberMe option was used.
*/
- (void)clearLoginSessionToken;
/**
  Validates the Session with the server. Also updates the Utilities.flybitsDeviceId. Completion block will tell you if the session is valid or not, and if it’s valid, the current user who is logged into the system. When valid is false or currentUser is nil then assume session is not valid and re-login.
*/
- (FlybitsRequest * _Nonnull)reconnectSessionWithCompletion:(void (^ _Nonnull)(BOOL, User * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SessionStatus) {
  SessionStatusDisconnected = 0,
  SessionStatusDisconnecting = 1,
  SessionStatusConnecting = 2,
  SessionStatusConnected = 3,
};


/**
  Configuration that is used for current session.
  You can specify which Flybits server and API key to use as well as preferred localization to use when retrieving zones/moments.
*/
SWIFT_CLASS("_TtC10FlybitsSDK20SessionConfiguration")
@interface SessionConfiguration : NSObject
/**
  APIKey can be set by developer or read from the flybits_sdk_configurables.json
*/
@property (nonatomic, copy) NSString * _Null_unspecified apiKey;
/**
  List of NSLocale with languageCode properly set – used for Localization – so \code
  Zone
  \endcode, \code
  Moment
  \endcode can return their name, icon etc in the specific language you want. By Setting it to nil, will return the \code
  Zone
  \endcode, \code
  Moment
  \endcode properties in default language set by their creators. For more information, see \code
  LocalizedObject
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSLocale *> * _Nonnull preferredLocales;
/**
  Using \code
  preferredLocales
  \endcode, returns key-value pair that can be used with HTTP request headers. For example: \code
  ["Accept-Language":"en,fr,ta"]
  \endcode where en,fr,ta are set in preferredLocales in that order.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull preferredLanguagesHeaders;
@property (nonatomic, readonly, copy) NSString * _Nonnull serverURL;
/**
  Default initializer, sets up XCGLogger
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Sets the logging level and toggles whether or not colours are used in the output.
  <em>NOTE: Colours are not currently supported as they cause a crash in Xcode.</em>
  \param level Supported levels: .Verbose, .Debug, .Info, .Warning, .Error and .Severe

  \param colors Use colours when logging (See <em>NOTE</em> above).

*/
- (void)setupLogging:(NSInteger)level options:(NSDictionary<NSString *, id> * _Nullable)options;
@end


/**
  \code
  Tags
  \endcode are used to group/label \code
  Zone
  \endcodes/\code
  Moment
  \endcodes/\code
  User
  \endcodes. Using a \code
  TagQuery
  \endcode, all the objects that are associated with tags can be retrieved.
*/
SWIFT_CLASS("_TtC10FlybitsSDK3Tag")
@interface Tag : NSObject <PushConfigurable>
/**
  Failable initializer that returns a \code
  Tag
  \endcode based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
/**
  Identifier that uniquely identifies each tag in the system (\code
  identifier
  \endcode in Objective-C).
*/
@property (nonatomic, copy) NSString * _Nonnull identifier;
/**
  \code
  Zone
  \endcodes that are associated with this \code
  Tag
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull zoneIDs;
/**
  \code
  Zone
  \endcode \code
  Moment
  \endcodes that are associated with this \code
  Tag
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull zoneMomentInstanceIDs;
/**
  \code
  Moment
  \endcode instances that are associated with this \code
  Tag
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull momentInstanceIDs;
/**
  \code
  Moment
  \endcodes that are associated with this \code
  Tag
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull momentType;
/**
  All the users that are associated with this \code
  Tag
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull userIDs;
/**
  The image associated with this \code
  Tag
  \endcode.
*/
@property (nonatomic, strong) Image * _Nullable image;
/**
  Localizations that is returned by server – \code
  Tag.value.value!
  \endcode will return the localized value
*/
@property (nonatomic, strong) NSDictionary * _Nullable localizations;
/**
  The MQTT route for this Tag
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull route;
/**
  Override to pretty-print the \code
  Tag
  \endcode’s description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Override to pretty-print the \code
  Tag
  \endcode’s debug description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/**
  The \code
  PushMessageEntity
  \endcode of this class (.Tag)
*/
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;
/**
  Subscribes the current object to push.
*/
- (void)subscribeToPush;
/**
  Unsubscribes the current object to push.
*/
- (void)unsubscribeFromPush;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Tag (SWIFT_EXTENSION(FlybitsSDK))
/**
  Objective-C wrapper: Localized value of the tag or “name” of the \code
  Tag
  \endcode.
*/
- (NSString * _Nullable)tagValue;
/**
  ObjectiveC wrapper: Localized value of the \code
  Tag
  \endcode returned for specific \code
  locale
  \endcode or nil if it doesn’t exist.
*/
- (NSString * _Nullable)localizedTagValue:(NSLocale * _Nonnull)locale;
@end


/**
  Manages the criteria to apply when searching for tags in Flybits server. A \code
  TagQuery
  \endcode is configured to retrieve tag objects that are associated with \code
  Zones
  \endcode/\code
  Moments
  \endcode/\code
  Users
  \endcode. Also, \code
  TagQuery
  \endcode can be used to search for \code
  Tags
  \endcode.
  Sample Query: Get all the \code
  Tag
  \endcodes associated with \code
  Zone
  \endcodes where \code
  id
  \endcode = 10, 12, 14, 16
  let query = TagQuery()
  query.zoneID = [10, 12, 14, 16]
  Sample Query: Get all the \code
  Tag
  \endcodes that have \code
  userID
  \endcode 18 and \code
  zoneID
  \endcode 120
  let query = TagQuery()
  query.zoneID = [120]
  query.userID = [18]
  query.type = [TagQuery.QueryType.ZONE, TagQuery.QueryType.USER]
  Sample Query: Get all the \code
  Tag
  \endcodes with value that begins with “<em>Aweso</em>”
  let query = TagQuery()
  query.searchValue = “Aweso”
  // Executing the query:
  TagActions.Query(query) { (json, error) -> Void in
  print(json)
  print(error)
  }
*/
SWIFT_CLASS("_TtC10FlybitsSDK8TagQuery")
@interface TagQuery : Query
/**
  \code
  Tag
  \endcodes that are associated with zones with id in \code
  zoneID
  \endcode
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable zoneIDs;
/**
  \code
  Tag
  \endcodes that are associated with users with id in \code
  userID
  \endcode
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIDs;
/**
  \code
  Tag
  \endcodes that are associated with zone moments with id in \code
  momentID
  \endcode
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentIDs;
/**
  \code
  Tag
  \endcodes that are associated with moment instances with id in \code
  momentType
  \endcode
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentTypes;
/**
  Detail of \code
  Tag
  \endcodes with \code
  Tag.id
  \endcode in \code
  tagID
  \endcode
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagIDs;
/**
  Value of \code
  Tag
  \endcodes that begins with \code
  searchValue
  \endcode
*/
@property (nonatomic, copy) NSString * _Nullable searchValue;
/**
  Returns key-value pair for API requests.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Convenience function to create a \code
  TagQuery
  \endcode with pre-populated search field.
  \param searchQuery A search string.


  returns:
  A \code
  TagQuery
  \endcode with a pre-populated search field.
*/
+ (TagQuery * _Nonnull)search:(NSString * _Nonnull)searchQuery;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface TagQuery (SWIFT_EXTENSION(FlybitsSDK))
/**
  Objective-C wrapper to privide access to \code
  TagQuery.QueryType.User
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TagQueryTypeUser;)
+ (NSString * _Nonnull)TagQueryTypeUser;
/**
  Objective-C wrapper to privide access to \code
  TagQuery.QueryType.Moment
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TagQueryTypeMoment;)
+ (NSString * _Nonnull)TagQueryTypeMoment;
/**
  Objective-C wrapper to privide access to \code
  TagQuery.QueryType.Zone
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TagQueryTypeZone;)
+ (NSString * _Nonnull)TagQueryTypeZone;
/**
  Add which types of tags to retrieve.
*/
- (void)addQueryTypes:(NSArray<NSString *> * _Nonnull)items;
/**
  Reset \code
  TagQueryType
  \endcode so it returns everything defined by \code
  TagQueryType
  \endcode
*/
- (void)removeAllQueryTypes;
@end


/**
  This class defines a list of constants for properties that can be included/excluded in a given API request.
*/
SWIFT_CLASS("_TtC10FlybitsSDK17TagQueryConstants")
@interface TagQueryConstants : NSObject
/**
  “defaultLanguage”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DefaultLanguage;)
+ (NSString * _Nonnull)DefaultLanguage;
/**
  “id”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ID;)
+ (NSString * _Nonnull)ID;
/**
  “isVisible”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsVisible;)
+ (NSString * _Nonnull)IsVisible;
/**
  “localizations”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Localizations;)
+ (NSString * _Nonnull)Localizations;
/**
  “zoneIds”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ZoneIDs;)
+ (NSString * _Nonnull)ZoneIDs;
/**
  “zoneMomentInstanceIds”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ZoneMomentInstanceIDs;)
+ (NSString * _Nonnull)ZoneMomentInstanceIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Gives fine control over fetching Tags using boolean expression (AND/OR) to
  express the query.
  For example: Getting a zones which has tags 2 tags:
  \code
  let tagID1 = ...
  let tagID2 = ...

  let exp = BooleanQuery(tagID1).OR(tagID2)
  let query = TagQueryExpressions()
  query.tagIDQuery = exp
  TagsRequest.Query(query) { (tags, pagination, error) -> Void in
      if error == nil {
          // handle error
      } else {
          // handle success
      }
  }.execute()

  \endcodeAlso, expression is chainable so you can do
  \code
  let id1 = ...
  .
  .
  .
  let id6 = ...

  let tagQuery = BooleanQuery(id1)
  .OR(id2)
  .AND([id3, id4], .AND)
  .OR([id5, id6], .OR)

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK19TagQueryExpressions")
@interface TagQueryExpressions : TagQuery
/**
  Equivalent to TagQuery.momentType but expressable using Boolean operators
*/
@property (nonatomic, strong) BooleanQuery * _Nullable momentTypeQuery;
/**
  Equivalent to TagQuery.momentID but expressable using Boolean operators
*/
@property (nonatomic, strong) BooleanQuery * _Nullable momentIDQuery;
/**
  Equivalent to TagQuery.userID but expressable using Boolean operators
*/
@property (nonatomic, strong) BooleanQuery * _Nullable userIDQuery;
/**
  Equivalent to TagQuery.zoneID but expressable using Boolean operators
*/
@property (nonatomic, strong) BooleanQuery * _Nullable zoneIDQuery;
/**
  Equivalent to TagQuery.tagID but expressable using Boolean operators
*/
@property (nonatomic, strong) BooleanQuery * _Nullable tagIDQuery;
/**
  Equivalent to TagQuery.searchValue but expressable using Boolean operators
*/
@property (nonatomic, strong) BooleanQuery * _Nullable searchQuery;
/**
  overrides \code
  toDictionary()
  \endcode and adds all the properties declared here into the
  returning dictionary
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  You can set value for TagQueryExpressions.searchQuery or using \code
  TagQueryExpressions.addSearch(...)
  \endcode you can add items to search. Each call to addSearch behaves as ‘boolean AND’ operation.
  \param value value to be searched

  \param fields array of fields in Zone to be searched. i.e., [“name”, “description”] will search both Zone’s name and Zone’s description property.


  returns:
  Returns the current TagQueryExpressions
*/
- (TagQueryExpressions * _Nonnull)addSearch:(NSString * _Nonnull)value fields:(NSArray<NSString *> * _Nullable)fields;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A basic structure to represent an image upload.
*/
SWIFT_CLASS("_TtC10FlybitsSDK15UploadImageItem")
@interface UploadImageItem : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  The image to upload.
*/
@property (nonatomic, strong) UIImage * _Null_unspecified image;
/**
  The content type (i.e. image/jpeg).
*/
@property (nonatomic, copy) NSString * _Null_unspecified contentType;
/**
  The URL of the file i.e. http://example.com/image/upload
*/
@property (nonatomic, copy) NSString * _Null_unspecified url;
/**
  Additional parameters to pass along i.e. [“reqType” : “updateUser”].
*/
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable params;
/**
  The filename i.e. file.png
*/
@property (nonatomic, copy) NSString * _Null_unspecified filename;
/**
  The upload name used in the form i.e. file
*/
@property (nonatomic, copy) NSString * _Null_unspecified uploadName;
@end

@class UserProfile;

/**
  The \code
  User
  \endcode class represents a specific user and used to store information (fullname, avatar, date of birth, etc) about a person who has registered an account with Flybits.
*/
SWIFT_CLASS("_TtC10FlybitsSDK4User")
@interface User : NSObject
/**
  The unique identifier of the \code
  User
  \endcode (\code
  identifier
  \endcode in Objective-C).
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/**
  The last time the user was modified on the server.
*/
@property (nonatomic, readonly) int64_t lastModified;
/**
  The user’s profile.
*/
@property (nonatomic, readonly, strong) UserProfile * _Nullable profile;
/**
  All the devices user currently logged in.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull deviceIDs;
/**
  A list of unique \code
  Zone
  \endcode identifiers that have been favourited by this user.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull favouritedZoneIDs;
/**
  The type of user.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable userTypeId;
/**
  Failable initializer that returns an \code
  User
  \endcode object based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
/**
  Saves the current user to the server (calls \code
  AccountRequest.UpdateDetails
  \endcode).
  \param completion \code
  User
  \endcode: The updated user object.<br />
  \code
  NSError
  \endcode: Any error encountered.

*/
- (void)saveWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion;
/**
  Updates the user’s details locally - call \code
  save()
  \endcode after updating to persist changes to the server.
  \param dict An \code
  NSDictionary
  \endcode containing key-value pairs of user details

*/
- (void)updateDetailsFrom:(NSDictionary * _Nonnull)dict;
/**
  Updates the profile image of the user with a specified \code
  image
  \endcode.
  \param image The new profile image object.

*/
- (void)updateProfileImageFrom:(Image * _Nonnull)image;
/**
  Updates the user’s profile information.
  \param newProfileInfo A profile information object

*/
- (void)updateProfileFrom:(UserProfile * _Nonnull)newProfileInfo;
/**
  Converts the user to a dictionary-style object for serialization to the server.

  returns:
  A dictionary-style object for serialization to the server.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionary;
- (void)disable;
/**
  Compares two \code
  User
  \endcodes for equality.
  \param object Another \code
  User
  \endcode (\code
  NSObject.isEqual()
  \endcode is used if object is not a \code
  User
  \endcode).


  returns:
  \code
  true
  \endcode if two \code
  User
  \endcodes have the same \code
  id
  \endcode, \code
  false
  \endcode otherwise.
*/
- (BOOL)isEqual:(id _Nullable)object;
/**
  The \code
  User
  \endcode’s hash value (used when treated as an \code
  NSObject
  \endcode).
*/
@property (nonatomic, readonly) NSUInteger hash;
/**
  The \code
  User
  \endcode’s hash value (used when treated as an \code
  NSObject
  \endcode).
*/
@property (nonatomic, readonly) NSInteger hashValue;
/**
  Constructs a \code
  User
  \endcode from a cached object.
  \param mo An \code
  NSManagedObject
  \endcode version of the \code
  User
  \endcode.

*/
- (nullable instancetype)initWithMo:(NSManagedObject * _Nonnull)mo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Represents personal detail of User such as firstname, lastname, gender email etc.
*/
SWIFT_CLASS("_TtC10FlybitsSDK11UserProfile")
@interface UserProfile : NSObject
/**
  First name
*/
@property (nonatomic, copy) NSString * _Nullable firstname;
/**
  Last name
*/
@property (nonatomic, copy) NSString * _Nullable lastname;
/**
  Image
*/
@property (nonatomic, strong) Image * _Nullable image;
/**
  Metadata
*/
@property (nonatomic, strong) NSDictionary * _Nullable metadata;
/**
  Email
*/
@property (nonatomic, copy) NSString * _Nullable email;
/**
  Birth Date – “yyyy-MM-dd’T’hh:mm:ssZ”
*/
@property (nonatomic, copy) NSString * _Nullable birthDate;
/**
  The date this User profile was created
*/
@property (nonatomic, copy) NSDate * _Nullable createdAt;
/**
  The date this User profile was modified
*/
@property (nonatomic, copy) NSDate * _Nullable lastModifiedAt;
/**
  Creates a user profile from a list of key-value pairs.
  \param dict An \code
  NSDictionary
  \endcode containing a list of key-value pairs.


  returns:
  A new \code
  UserProfile
  \endcode object.
*/
+ (UserProfile * _Nonnull)userProfileFrom:(NSDictionary * _Nonnull)dict;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary;
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
/**
  Converts the user to a dictionary-style object for serialization to the server.

  returns:
  A dictionary-style object for serialization to the server.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionary;
/**
  Updates the user’s profile with a list of key-value pairs.
  <em>NOTE: Returns a \code
  UserProfile
  \endcode object to support ‘chaining’.</em>
  \param dict An \code
  NSDictionary
  \endcode containing a list of key-value pairs.


  returns:
  Updates and returns the \code
  UserProfile
  \endcode object.
*/
- (UserProfile * _Nonnull)updateFromDictionary:(NSDictionary * _Nonnull)dict;
/**
  Updates the user’s profile with an existing \code
  UserProfile
  \endcode object.
  <em>NOTE: Returns a \code
  UserProfile
  \endcode object to support ‘chaining’.</em>
  \param newProfile A \code
  UserProfile
  \endcode object to use for the update.


  returns:
  Updates and returns the \code
  UserProfile
  \endcode object.
*/
- (UserProfile * _Nonnull)updateFromProfile:(UserProfile * _Nonnull)newProfile;
@end


/**
  Using \code
  UsersQuery
  \endcode, you can search for \code
  User
  \endcodes who are registered with Flybits. A \code
  User
  \endcode can be searched by all the types defined in \code
  UsersQuery.UserSearchType
  \endcode.
  Example – Search for users with id “USERID1”, “USERID2”, “USERID3” and search their lastname or email for the keyword “gma” and only return first 2 responses.
  \code
  let query = UsersQuery(limit:2, offset:0);

  // only search lastname and email
  query.searchFields = [UserSearchType.Lastname, UserSearchType.Email]

  // value to search
  query.searchString = "gma"

  // only search users with `userIDs`, default is nil
  query.userIDs = ["USERID1", "USERID2", "USERID3"]

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK10UsersQuery")
@interface UsersQuery : Query
/**
  Only search for users with \code
  userIDs
  \endcode
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIDs;
/**
  Keyword that should be searched
*/
@property (nonatomic, copy) NSString * _Nullable searchString;
/**
  Returns key-value pair for API requests.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  This class defines a list of constants for properties that can be included/excluded in a given API request.
*/
SWIFT_CLASS("_TtC10FlybitsSDK19UsersQueryConstants")
@interface UsersQueryConstants : NSObject
/**
  “activeUserRelationship”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ActiveUserRelationship;)
+ (NSString * _Nonnull)ActiveUserRelationship;
/**
  “createdAt”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CreatedAt;)
+ (NSString * _Nonnull)CreatedAt;
/**
  “deviceIds”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeviceIDs;)
+ (NSString * _Nonnull)DeviceIDs;
/**
  “email”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Email;)
+ (NSString * _Nonnull)Email;
/**
  “favoritedZoneIds”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FavouritedZoneIDs;)
+ (NSString * _Nonnull)FavouritedZoneIDs;
/**
  “firstName”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Firstname;)
+ (NSString * _Nonnull)Firstname;
/**
  “icon”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Icon;)
+ (NSString * _Nonnull)Icon;
/**
  “id”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ID;)
+ (NSString * _Nonnull)ID;
/**
  “lastModifiedAt”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LastModifiedAt;)
+ (NSString * _Nonnull)LastModifiedAt;
/**
  “lastName”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Lastname;)
+ (NSString * _Nonnull)Lastname;
/**
  “userTypeId”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UserTypeID;)
+ (NSString * _Nonnull)UserTypeID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A set of utilities to access common iOS properties.
*/
SWIFT_CLASS_NAMED("Utilities")
@interface FlybitsUtilities : NSObject
/**
  Determines whether or not this is a simulator build.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL IsSimulator;)
+ (BOOL)IsSimulator;
/**
  The Flybits SDK version number in the Major.Minor.Patch format.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion;
/**
  The Vendor \code
  UUID
  \endcode returned from UIDevice.currentDevice().identifierForVendor (handles nullable type)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vendorUUID;)
+ (NSString * _Nonnull)vendorUUID;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable flybitsDeviceID;)
+ (NSString * _Nullable)flybitsDeviceID;
+ (NSDictionary<NSString *, id> * _Nonnull)CreateNSErrorUserInfo:(NSString * _Nonnull)description failure:(NSString * _Nullable)failure recovery:(NSString * _Nullable)recovery;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Adds visible property to Tag object, letting user decide that if this tag shoud be displayed to users.
*/
SWIFT_CLASS("_TtC10FlybitsSDK10VisibleTag")
@interface VisibleTag : Tag
/**
  Whether or not this \code
  VisibleTag
  \endcode should be displayed in the UI.
*/
@property (nonatomic) BOOL visibility;
/**
  Failable initializer that returns a \code
  VisibleTag
  \endcode object based on the supplied representation.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)rep OBJC_DESIGNATED_INITIALIZER;
/**
  Override to pretty-print the \code
  VisibleTag
  \endcode’s description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Override to pretty-print the \code
  VisibleTag
  \endcode’s description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/**
  The \code
  Zone
  \endcode class represents an object or thing that can provide group of services/contexts to users. \code
  Zone
  \endcode class stores information of a \code
  Zone
  \endcode such as localized name, description, icon as well as metadata, location/shapes and tags.
  \code
  Zone
  \endcode also gives you powerful analytics such as how many people are connected to it, favourited it and how long a user is connected to it.
  A \code
  Zone
  \endcode has different privacy/permission viewing levels. A public zone can be viewed by anyone. A protected zone needs a password –obtainable from a \code
  Zone
  \endcode owner/manager– to connect to it. A private \code
  Zone
  \endcode needs a passcode and the exact \code
  Zone
  \endcode name need to be entered by user to connect to it. Private \code
  Zone
  \endcodes are not visible to other users, you require explicit permission to view it in the case where you manage/own the \code
  Zone
  \endcode, otherwise you require the name and password.
  Example of a \code
  Zone
  \endcode:
  A landmark can be represented by a \code
  Zone
  \endcode with \code
  location/shapes
  \endcode defining where they are in the globe. That \code
  Zone
  \endcode then can have \code
  Moment
  \endcodes which provides useful services to users. You can then query for zones that are at given latitude and longitude with certain radius.
  You can also obtain some analytics from the \code
  Zone
  \endcode, including: total time spent, total user visits, favourite counts, manager counts, role counts, tag counts and moment counts.
  Localization is also available for few properties including name, icon and description.
*/
SWIFT_CLASS("_TtC10FlybitsSDK4Zone")
@interface Zone : NSObject <PushConfigurable>
/**
  Unique identifier – \code
  String
  \endcode version of \code
  UUID
  \endcode, (\code
  identifier
  \endcode in Objective-C).
*/
@property (nonatomic, copy) NSString * _Nonnull identifier;
/**
  The User who created this zone – \code
  User.id
  \endcode
*/
@property (nonatomic, copy) NSString * _Nonnull creatorId;
/**
  Is the current user within the boundary of the shape defined by \code
  Zone.shapes
  \endcode
*/
@property (nonatomic, readonly) BOOL insideZone;
/**
  Whether or not the \code
  Zone
  \endcode has been added as a favourite by the current user.
*/
@property (nonatomic) BOOL favourited;
/**
  Distance to the calculated center of the zone from \code
  ZonesQuery.location
  \endcode.
*/
@property (nonatomic, readonly) float distanceToCenter;
/**
  Distance to the edge of the zone from \code
  ZonesQuery.location
  \endcode.
*/
@property (nonatomic, readonly) float distanceToEdge;
/**
  Whether or not the \code
  Zone
  \endcode is published.
*/
@property (nonatomic) BOOL published;
/**
  The timezone. Default Value = “”
*/
@property (nonatomic, copy) NSString * _Nonnull timezone;
/**
  The colour. Default Value = “”
*/
@property (nonatomic, copy) NSString * _Nonnull color;
/**
  A list of images delimited by size.
*/
@property (nonatomic, strong) Image * _Nonnull image;
/**
  A list of images delimited by size.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagIDs;
/**
  Additional metadata that can be set from management console
*/
@property (nonatomic, strong) Metadata * _Nullable metadata;
/**
  \code
  Array
  \endcode of \code
  CLLocation
  \endcode objects used to define the overall geoshape.
*/
@property (nonatomic, copy) NSArray<CLLocation *> * _Nullable shapes;
/**
  Geocoded latitude, longitude of the property \code
  Zone.address
  \endcode
*/
@property (nonatomic) CLLocationCoordinate2D addressCoordinate;
/**
  A postal address defined by the zone creator which best represents the \code
  Zone
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nullable address;
/**
  Contains the list of moment instance identifiers in this \code
  Zone
  \endcode. Check Zone.totalMomentInstanceCount to get the total.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentInstanceIDs;
/**
  Most of the time, foo.value or foo.valueForLocale will suffice but if there is a custom property that has localization but SDK doesn’t have custom getter, then use this.
*/
@property (nonatomic, strong) NSDictionary * _Nullable localizations;
/**
  The \code
  PushMessageEntity
  \endcode of this class (.Zone)
*/
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;
/**
  The date this Zone was created
*/
@property (nonatomic, copy) NSDate * _Nullable createdAt;
/**
  The date this Zone was modified
*/
@property (nonatomic, copy) NSDate * _Nullable lastModifiedAt;
/**
  The default language of the Zone
*/
@property (nonatomic, copy) NSLocale * _Nullable defaultLanguage;
/**
  The MQTT route for this Zone
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull route;
/**
  Creates an empty Zone object.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a Zone from a raw server response.
  \param response The response received from the server.

  \param representation The raw data received from the server.

*/
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
/**
  Updates the current \code
  Zone
  \endcode with a JSON Object returned by the server.
  \code
  Zone.id
  \endcode cannot be updated with this – only by creating a new can the \code
  id
  \endcode be changed.
  It will check for every other propertie, if it has a property, then it will update the
  property with the new value. If \code
  dict
  \endcode doesn’t have a property, that property is left untouched – will have the previous value.
  \param dict An \code
  NSDictionary
  \endcode containing a list of key-value pairs.


  returns:
  Updates and returns the \code
  Zone
  \endcode object – useful for chaining.
*/
- (Zone * _Nonnull)updateFrom:(NSDictionary * _Nonnull)dictionary;
/**
  Override to pretty-print the \code
  Zone
  \endcode’s description.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Override to pretty-print the \code
  Zone
  \endcode’s debugDescription
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/**
  The \code
  Zone
  \endcode’s hash value (used when treated as an \code
  NSObject
  \endcode).
*/
@property (nonatomic, readonly) NSUInteger hash;
/**
  Compares two \code
  Zone
  \endcodes for equality.
  \param object Another \code
  Zone
  \endcode (\code
  NSObject.isEqual()
  \endcode is used if object is not a \code
  Zone
  \endcode).


  returns:
  \code
  true
  \endcode if two \code
  Zone
  \endcodes have the same \code
  id
  \endcode, \code
  false
  \endcode otherwise.
*/
- (BOOL)isEqual:(id _Nullable)object;
/**
  Constructs a \code
  Zone
  \endcode from a cached object.
  \param mo An \code
  NSManagedObject
  \endcode version of the \code
  Zone
  \endcode.

*/
- (nullable instancetype)initWithMo:(NSManagedObject * _Nonnull)mo OBJC_DESIGNATED_INITIALIZER;
/**
  Subscribes the current object to push.
*/
- (void)subscribeToPush;
/**
  Subscribes the current object to push.
*/
- (void)unsubscribeFromPush;
@end


@interface Zone (SWIFT_EXTENSION(FlybitsSDK))
/**
  Objective-C wrapper - Get \code
  Zone
  \endcode’s name in the order of \code
  preferredLocale
  \endcode or \code
  defaultLocale
  \endcode.
*/
- (NSString * _Nullable)zoneName;
/**
  Objective-C wrapper - Get \code
  Zone
  \endcode’s localized name for the specific locale with \code
  languageCode
  \endcode. Default value = “”.
*/
- (NSString * _Nullable)localizedName:(NSLocale * _Nonnull)locale;
/**
  Objective-C wrapper - Get \code
  Zone
  \endcode’s description in the order of \code
  preferredLocale
  \endcode or \code
  defaultLocale
  \endcode.
*/
- (NSString * _Nullable)zoneDesc;
/**
  Objective-C wrapper - Get Zone’s localized name for the specific locale with \code
  languageCode
  \endcode. Default value = “”.
*/
- (NSString * _Nullable)localizedZoneDescription:(NSLocale * _Nonnull)locale;
/**
  Objective-C wrapper - Get \code
  Zone
  \endcode’s image
*/
- (Image * _Nullable)zoneImage:(enum ImageSize)size;
/**
  \code
  Zone
  \endcode is public and can be viewed by anyone.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ZonePrivacyLevelPublic;)
+ (NSString * _Nonnull)ZonePrivacyLevelPublic;
/**
  \code
  Zone
  \endcode is protected, need a passcode to view the \code
  Zone
  \endcode. You can obtain the passcode from \code
  Zone
  \endcode owner/manager.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ZonePrivacyLevelProtected;)
+ (NSString * _Nonnull)ZonePrivacyLevelProtected;
/**
  \code
  Zone
  \endcode is private, you will never see this type of \code
  Zone
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ZonePrivacyLevelPrivate;)
+ (NSString * _Nonnull)ZonePrivacyLevelPrivate;
/**
  Viewing privacy / permission of this zone by a user. Possible privacy levels are can be found in \code
  Zone.ZonePrivacyLevel
  \endcode
*/
@property (nonatomic, copy) NSString * _Nullable privacyLevel;
/**
  Returns the default locale defined by Zone owner; Can be null if you exclude defaultLocale when querying Zones
*/
- (NSLocale * _Nullable)defaultLocale;
@end


@interface Zone (SWIFT_EXTENSION(FlybitsSDK))
/**
  Analytics - How long users have stayed connected to this zone. Default Value = 0.0
*/
@property (nonatomic, readonly) float totalTimeSpent;
/**
  Analytics - How many unique users have entered this zone. Default Value = 0.0
*/
@property (nonatomic, readonly) float totalUserVisits;
/**
  Analytics - How many people have favourited this zone. Default Value = 0.0
*/
@property (nonatomic, readonly) NSInteger favouriteCount;
/**
  Analytics - Total number of managers managing this zone
*/
@property (nonatomic, readonly) NSInteger managerCount;
/**
  Analytics - Total number of user roles this zone has
*/
@property (nonatomic, readonly) NSInteger roleCount;
/**
  Analytics - Total number of tags associated with this zone
*/
@property (nonatomic, readonly) NSInteger tagCount;
/**
  Analytics - Total number of moment instances that are contained by this zone
*/
@property (nonatomic, readonly) NSInteger zoneMomentCount;
@end


/**
  Allows for custom criteria when retrieving a list of \code
  Zone
  \endcodes using \code
  ZoneRequest.Query(...)
  \endcode.
  When querying for \code
  Zone
  \endcodes, if you exclude certain fields from the response by
  specifying \code
  ZonesQuery.excludes = [ ... ]
  \endcode, value for those excluded properties will be
  set to their default values. For example, if you excluded \code
  localization
  \endcode from \code
  ZonesQuery
  \endcode,
  then all \code
  Zone.name
  \endcode will have an empty \code
  String
  \endcode (””) as the default value.
  <em>NOTE: For performance reason, limit might be different than what you specified.</em>
  Example: Retrieve all the \code
  Zone
  \endcodes created by a specific list of users.
  \code
  // Swift
  let query = ZonesQuery(limit:500, offset:0)
  query.userIDs = ["USERID1", "USERID2", "USERID2"]

  // Objective-C
  ZonesQuery *query1 = [[ZonesQuery alloc] initWithLimit:NSUIntegerMax offset:0];
  query.userIDs = @[@"USERID1", @"USERID2", @"USERID2"];

  \endcodeExample: Retrieving \code
  Zone
  \endcodes within 5km around a latitude, longitude.
  \code
  // Swift
  let query = ZonesQuery(limit:500, offset:0)
  query.location = CLLocation(latitude: 43.333333, longitude: -79.666666)
  query.distance = CLLocationDistance(500)

  // Objective-C
  ZonesQuery *query1 = [[ZonesQuery alloc] initWithLimit:NSUIntegerMax offset:0];
  query.userIDs = @[@"USERID1", @"USERID2", @"USERID2"];

  \endcodeExample: Retrieving \code
  Zone
  \endcodes within 5km around a latitude, longitude that are favourited by me (the current \code
  User
  \endcode).<br />
  <em>NOTE: You have to get tagID first by using \code
  TagRequest
  \endcode and then pass those IDs in the query below</em>
  \code
  let query = ZonesQuery(limit:500, offset:0)
  query.location = CLLocation(latitude: 43.333333, longitude: -79.666666)
  query.distance = CLLocationDistance(500)
  query.favourites = true
  query.tagIDs = ["TAGID1", "TAGID2", "TAGID3"]

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK10ZonesQuery")
@interface ZonesQuery : Query
/**
  Zones containing \code
  zoneIDs
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable zoneIDs;
/**
  Zones created by \code
  userIDs
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIDs;
/**
  Zones managed by \code
  managerIDs
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable managerIDs;
/**
  Zones that have tags added to them with \code
  tagIDs
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagIDs;
/**
  Zones around certain \code
  location
  \endcode with latitude, longitude.
*/
@property (nonatomic, strong) CLLocation * _Nullable location;
/**
  Search token (specify what properties to search by using \code
  ZonesQuery.searchFields
  \endcode).
*/
@property (nonatomic, copy) NSString * _Nullable search;
/**
  Response should be ordered by the following model property name.
*/
@property (nonatomic, copy) NSString * _Nullable orderBy;
/**
  Zones in certain timezone
*/
@property (nonatomic, copy) NSString * _Nullable timezone;
/**
  Zones that are favourited by users in \code
  favouritedByUserIDs
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull favouritedByUserIDs;
/**
  Returns a copy of this Query
*/
- (ZonesQuery * _Nonnull)duplicate;
/**
  Returns key-value pair for API requests.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZonesQuery (SWIFT_EXTENSION(FlybitsSDK))
/**
  Created by me - set to \code
  true
  \endcode, if you want to get \code
  Zone
  \endcodes that are created by you; default is \code
  nil
  \endcode
*/
@property (nonatomic, strong) NSNumber * _Nullable zonesCreatedByMe;
/**
  Managed by me - set to \code
  true
  \endcode if you want to get \code
  Zone
  \endcodes that are managed by you; default is \code
  nil
  \endcode
*/
@property (nonatomic, strong) NSNumber * _Nullable zonesManagedByMe;
/**
  Favourites - Set to \code
  true
  \endcode if you want to get your favourited zones; default is \code
  nil
  \endcode
*/
@property (nonatomic, strong) NSNumber * _Nullable favouritedZones;
/**
  Distance - Get zones that are within certain meters \code
  distanceFromLocation
  \endcode from location; default is \code
  nil
  \endcode
*/
@property (nonatomic, strong) NSNumber * _Nullable distanceFromLocation;
/**
  Objective-C wrapper to access \code
  ZonesQuery.SearchField.NAME
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SearchQueryFieldName;)
+ (NSString * _Nonnull)SearchQueryFieldName;
/**
  Objective-C wrapper to access \code
  ZonesQuery.SearchField.DESCRIPTION
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SearchQueryFieldDescription;)
+ (NSString * _Nonnull)SearchQueryFieldDescription;
/**
  Objective-C wrapper to access \code
  ZonesQuery.SearchField.PUBLISHED
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SearchQueryFieldPublished;)
+ (NSString * _Nonnull)SearchQueryFieldPublished;
/**
  Objective-C wrapper to update the list of search fields.
*/
- (void)setSearchFields:(NSArray<NSString *> * _Nullable)fields;
@end


/**
  This class defines a list of constants for properties that can be included/excluded in a given API request.
*/
SWIFT_CLASS("_TtC10FlybitsSDK19ZonesQueryConstants")
@interface ZonesQueryConstants : NSObject
/**
  “activeUserRelationship”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ActiveUserRelationship;)
+ (NSString * _Nonnull)ActiveUserRelationship;
/**
  “address”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Address;)
+ (NSString * _Nonnull)Address;
/**
  “addressCoordinates”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AddressCoordinates;)
+ (NSString * _Nonnull)AddressCoordinates;
/**
  “analytics”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Analytics;)
+ (NSString * _Nonnull)Analytics;
/**
  “color”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Color;)
+ (NSString * _Nonnull)Color;
/**
  “createdAt”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CreatedAt;)
+ (NSString * _Nonnull)CreatedAt;
/**
  “creatorID”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CreatorID;)
+ (NSString * _Nonnull)CreatorID;
/**
  “defaultLanguage”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DefaultLanguage;)
+ (NSString * _Nonnull)DefaultLanguage;
/**
  “id”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ID;)
+ (NSString * _Nonnull)ID;
/**
  “isPublished”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsPublished;)
+ (NSString * _Nonnull)IsPublished;
/**
  “lastModifiedAt”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LastModifiedAt;)
+ (NSString * _Nonnull)LastModifiedAt;
/**
  “localizations”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Localizations;)
+ (NSString * _Nonnull)Localizations;
/**
  “metadata”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Metadata;)
+ (NSString * _Nonnull)Metadata;
/**
  “privacyLevel”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PrivacyLevel;)
+ (NSString * _Nonnull)PrivacyLevel;
/**
  “shapes”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Shapes;)
+ (NSString * _Nonnull)Shapes;
/**
  “tagIds”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TagIDs;)
+ (NSString * _Nonnull)TagIDs;
/**
  “timezone”
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Timezone;)
+ (NSString * _Nonnull)Timezone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Gives fine control over fetching Zones using boolean expression (AND/OR) to
  express the query. Setting somne of the properties will ignore/overrides the values
  set by some properties from the parent class – ZonesQuery. For example, if \code
  favorites
  \endcode is set to \code
  true
  \endcode then it will be ignored when you also set \code
  favoritedUserIDQuery
  \endcode.
  For example: Getting a zones which has tags 2 tags:
  \code
  let tagID1 = ...
  let tagID2 = ...

  let tagQuery = BooleanQuery([tagID1, tagID2], .AND)

  let query = ZonesQueryExpressions()
  query.tagIDQuery = tagQuery

  ZoneRequest.Query(query, completion: { (zones, pagination, error) -> Void in
      print(zones)
      print(error)
  }).execute()

  \endcodeAlso, expression is chainable so you can do
  \code
  let id1 = ...
   .
   .
   .
  let id6 = ...


  let tagQuery = BooleanQuery(id1)
  .OR(id2)
  .AND([id3, id4], .AND)
  .OR([id5, id6], .OR)

  \endcode*/
SWIFT_CLASS("_TtC10FlybitsSDK21ZonesQueryExpressions")
@interface ZonesQueryExpressions : ZonesQuery
/**
  Query for \code
  Zone
  \endcodes based on \code
  Zone.id
  \endcode. Overrides ZonesQueryExpression.zoneIDs.
*/
@property (nonatomic, strong) BooleanQuery * _Nullable zoneIDQuery;
/**
  Query for \code
  Zone
  \endcodes based on all the associated tags to the zones with
  \code
  Tag.id
  \endcode. Overrides ZonesQueryExpression.tagIDs.
*/
@property (nonatomic, strong) BooleanQuery * _Nullable tagIDQuery;
/**
  Query for \code
  Zone
  \endcodes based on users that have permission to manage the
  zones with \code
  User.id
  \endcode. Overrides ZonesQueryExpression.managerIDs.
*/
@property (nonatomic, strong) BooleanQuery * _Nullable managerIDQuery;
/**
  Query for \code
  Zone
  \endcodes based on users who has favourited with \code
  User.id
  \endcode.
  Overrides ZonesQueryExpression.favouritedByUserIDs and ZonesQueryExpression.favorites
*/
@property (nonatomic, strong) BooleanQuery * _Nullable favoritedUserIDQuery;
/**
  Query for \code
  Zone
  \endcodes with userIDs to find all the `Zone’s they have created.
  Overrides ZonesQueryExpression.userIDs
*/
@property (nonatomic, strong) BooleanQuery * _Nullable userIDQuery;
/**
  Setting value for this property will ignore the ZonesQueryExpression.search property.
*/
@property (nonatomic, strong) BooleanQuery * _Nullable searchQuery;
/**
  Zones within the boundary of time zone; i.e., ‘America/Toronto’
*/
@property (nonatomic, strong) BooleanQuery * _Nullable timeZoneQuery;
/**
  Returns key-value pair for API requests.
*/
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  You can set value for ZonesQueryExpression.searchQuery or using \code
  ZonesQueryExpression.addSearch(...)
  \endcode you can add items to search. Each call to addSearch behaves as ‘boolean AND’ operation.
  \param value value to be searched

  \param fields array of fields in Zone to be searched. i.e., [“name”, “description”] will search both Zone’s name and Zone’s description property.


  returns:
  Returns the current ZonesQueryExpression
*/
- (ZonesQueryExpressions * _Nonnull)addSearch:(NSString * _Nonnull)value fields:(NSArray<NSString *> * _Nullable)fields;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSUUID;

SWIFT_CLASS("_TtC10FlybitsSDK7iBeacon")
@interface iBeacon : Beacon
@property (nonatomic, readonly, copy) NSString * _Nonnull majorID;
@property (nonatomic, readonly, copy) NSString * _Nonnull minorID;
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull beaconType;)
+ (NSString * _Nonnull)beaconType;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithMajorID:(NSString * _Nonnull)majorID minorID:(NSString * _Nonnull)minorID uuid:(NSUUID * _Nonnull)uuid distance:(CLLocationDistance)distance RSSI:(NSInteger)RSSI batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange OBJC_DESIGNATED_INITIALIZER;
- (void)update:(Beacon * _Nonnull)other;
@property (nonatomic, readonly) NSInteger hashValue;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object;
- (nonnull instancetype)initWithStrength:(NSInteger)strength distance:(CLLocationDistance)distance batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange SWIFT_UNAVAILABLE;
@end


/**
  The \code
  iBeaconDataProvider
  \endcode provides information about iBeacons in the vicinity of the device.
*/
SWIFT_CLASS("_TtC10FlybitsSDK19iBeaconDataProvider")
@interface iBeaconDataProvider : BeaconDataProvider <CoreLocationDataProviderDelegate>
- (void)startRangingBeaconsWithBeacons:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)startMonitoringForRegions:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)stopRangingBeacons:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)stopMonitoringForRegions:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
/**
  Retrieves information about active beacons including distance and identifying data.
  \param completion A completion called by the \code
  ContextManager
  \endcode to update the latest data.

*/
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons in:(CLBeaconRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider rangingBeaconsDidFailFor:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, iBeaconOptions) {
  iBeaconOptionsMonitoring = 0,
  iBeaconOptionsRanging = 1,
};

#pragma clang diagnostic pop
